
Masa Yardimcisi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000103c  000010d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000103c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  00800124  00800124  000010f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001124  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b8  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000029a3  00000000  00000000  0000131c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e91  00000000  00000000  00003cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000163d  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  00006190  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008e5  00000000  00000000  00006568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013cf  00000000  00000000  00006e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  0000821c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
       4:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       8:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
       c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      10:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      14:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      18:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      1c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      20:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      24:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      28:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      2c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      30:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      34:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      38:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      3c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      40:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      44:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      48:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      4c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      50:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      54:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      58:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      5c:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      60:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>
      64:	0c 94 5d 00 	jmp	0xba	; 0xba <__bad_interrupt>

00000068 <ResetTimeCode>:
      68:	80 00 00 01 01 01 00 00                             ........

00000070 <__KP_Map>:
      70:	31 32 33 41 34 35 36 42 37 38 39 43 45 30 46 44     123A456B789CE0FD

00000080 <__ctors_end>:
      80:	11 24       	eor	r1, r1
      82:	1f be       	out	0x3f, r1	; 63
      84:	cf ef       	ldi	r28, 0xFF	; 255
      86:	d8 e0       	ldi	r29, 0x08	; 8
      88:	de bf       	out	0x3e, r29	; 62
      8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
      8c:	11 e0       	ldi	r17, 0x01	; 1
      8e:	a0 e0       	ldi	r26, 0x00	; 0
      90:	b1 e0       	ldi	r27, 0x01	; 1
      92:	ec e3       	ldi	r30, 0x3C	; 60
      94:	f0 e1       	ldi	r31, 0x10	; 16
      96:	02 c0       	rjmp	.+4      	; 0x9c <__do_copy_data+0x10>
      98:	05 90       	lpm	r0, Z+
      9a:	0d 92       	st	X+, r0
      9c:	a4 32       	cpi	r26, 0x24	; 36
      9e:	b1 07       	cpc	r27, r17
      a0:	d9 f7       	brne	.-10     	; 0x98 <__do_copy_data+0xc>

000000a2 <__do_clear_bss>:
      a2:	21 e0       	ldi	r18, 0x01	; 1
      a4:	a4 e2       	ldi	r26, 0x24	; 36
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	01 c0       	rjmp	.+2      	; 0xac <.do_clear_bss_start>

000000aa <.do_clear_bss_loop>:
      aa:	1d 92       	st	X+, r1

000000ac <.do_clear_bss_start>:
      ac:	ac 37       	cpi	r26, 0x7C	; 124
      ae:	b2 07       	cpc	r27, r18
      b0:	e1 f7       	brne	.-8      	; 0xaa <.do_clear_bss_loop>
      b2:	0e 94 65 05 	call	0xaca	; 0xaca <main>
      b6:	0c 94 1c 08 	jmp	0x1038	; 0x1038 <_exit>

000000ba <__bad_interrupt>:
      ba:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000be <ds1302_shiftout>:

void ds1302_shiftout(unsigned char AData)
  {
    unsigned char Bits=8;

    DDR(SIO_PORT)|=_BV(SIO_PIN);           // Set SIO to output
      be:	94 b1       	in	r25, 0x04	; 4
      c0:	92 60       	ori	r25, 0x02	; 2
      c2:	94 b9       	out	0x04, r25	; 4

const unsigned char ResetTimeCode[8] PROGMEM = {0x80,0x00,0x00,0x01,0x01,0x01,0x00,0x00};

void ds1302_shiftout(unsigned char AData)
  {
    unsigned char Bits=8;
      c4:	28 e0       	ldi	r18, 0x08	; 8

    DDR(SIO_PORT)|=_BV(SIO_PIN);           // Set SIO to output
    while (Bits)
      c6:	16 c0       	rjmp	.+44     	; 0xf4 <ds1302_shiftout+0x36>
      {
        if (AData & _BV(0))                // LSB sent first
      c8:	80 ff       	sbrs	r24, 0
      ca:	04 c0       	rjmp	.+8      	; 0xd4 <ds1302_shiftout+0x16>
          SIO_PORT|=_BV(SIO_PIN);
      cc:	95 b1       	in	r25, 0x05	; 5
      ce:	92 60       	ori	r25, 0x02	; 2
      d0:	95 b9       	out	0x05, r25	; 5
      d2:	03 c0       	rjmp	.+6      	; 0xda <ds1302_shiftout+0x1c>
        else SIO_PORT&=~_BV(SIO_PIN);
      d4:	95 b1       	in	r25, 0x05	; 5
      d6:	9d 7f       	andi	r25, 0xFD	; 253
      d8:	95 b9       	out	0x05, r25	; 5
        Delay_ns(DS1302_TDC);
      da:	00 00       	nop
        SCLK_PORT|=_BV(SCLK_PIN);          // Cycle SCLK
      dc:	95 b1       	in	r25, 0x05	; 5
      de:	91 60       	ori	r25, 0x01	; 1
      e0:	95 b9       	out	0x05, r25	; 5
        Delay_ns(DS1302_CH);
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <ds1302_shiftout+0x26>
      e4:	00 c0       	rjmp	.+0      	; 0xe6 <ds1302_shiftout+0x28>
        SCLK_PORT&=~_BV(SCLK_PIN);
      e6:	95 b1       	in	r25, 0x05	; 5
      e8:	9e 7f       	andi	r25, 0xFE	; 254
      ea:	95 b9       	out	0x05, r25	; 5
        Delay_ns(DS1302_CL);
      ec:	00 c0       	rjmp	.+0      	; 0xee <ds1302_shiftout+0x30>
      ee:	00 c0       	rjmp	.+0      	; 0xf0 <ds1302_shiftout+0x32>
        AData>>=1;                         // Prepare to send next bit
      f0:	86 95       	lsr	r24
        Bits--;
      f2:	21 50       	subi	r18, 0x01	; 1
void ds1302_shiftout(unsigned char AData)
  {
    unsigned char Bits=8;

    DDR(SIO_PORT)|=_BV(SIO_PIN);           // Set SIO to output
    while (Bits)
      f4:	21 11       	cpse	r18, r1
      f6:	e8 cf       	rjmp	.-48     	; 0xc8 <ds1302_shiftout+0xa>
        SCLK_PORT&=~_BV(SCLK_PIN);
        Delay_ns(DS1302_CL);
        AData>>=1;                         // Prepare to send next bit
        Bits--;
      }
    DDR(SIO_PORT)&=~_BV(SIO_PIN);          // Set SIO back to input
      f8:	84 b1       	in	r24, 0x04	; 4
      fa:	8d 7f       	andi	r24, 0xFD	; 253
      fc:	84 b9       	out	0x04, r24	; 4
      fe:	08 95       	ret

00000100 <ds1302_shiftin>:
  }

unsigned char ds1302_shiftin()
  {
    unsigned char Bits=8;
    unsigned int ui1=0;
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	90 e0       	ldi	r25, 0x00	; 0
    DDR(SIO_PORT)&=~_BV(SIO_PIN);          // Set SIO back to input
  }

unsigned char ds1302_shiftin()
  {
    unsigned char Bits=8;
     104:	38 e0       	ldi	r19, 0x08	; 8
    unsigned int ui1=0;

    while (Bits)
     106:	16 c0       	rjmp	.+44     	; 0x134 <ds1302_shiftin+0x34>
      {
        ui1>>=1;
     108:	96 95       	lsr	r25
     10a:	87 95       	ror	r24
        ui1|=(PIN(SIO_PORT) & _BV(SIO_PIN))?128:0;       // LSB received first
     10c:	19 9b       	sbis	0x03, 1	; 3
     10e:	03 c0       	rjmp	.+6      	; 0x116 <ds1302_shiftin+0x16>
     110:	40 e8       	ldi	r20, 0x80	; 128
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	02 c0       	rjmp	.+4      	; 0x11a <ds1302_shiftin+0x1a>
     116:	40 e0       	ldi	r20, 0x00	; 0
     118:	50 e0       	ldi	r21, 0x00	; 0
     11a:	84 2b       	or	r24, r20
     11c:	95 2b       	or	r25, r21
        SCLK_PORT|=_BV(SCLK_PIN);                        // Cycle SCLK
     11e:	25 b1       	in	r18, 0x05	; 5
     120:	21 60       	ori	r18, 0x01	; 1
     122:	25 b9       	out	0x05, r18	; 5
        Delay_ns(DS1302_CH);
     124:	00 c0       	rjmp	.+0      	; 0x126 <ds1302_shiftin+0x26>
     126:	00 c0       	rjmp	.+0      	; 0x128 <ds1302_shiftin+0x28>
        SCLK_PORT&=~_BV(SCLK_PIN);
     128:	25 b1       	in	r18, 0x05	; 5
     12a:	2e 7f       	andi	r18, 0xFE	; 254
     12c:	25 b9       	out	0x05, r18	; 5
        Delay_ns(DS1302_CL);
     12e:	00 c0       	rjmp	.+0      	; 0x130 <ds1302_shiftin+0x30>
     130:	00 c0       	rjmp	.+0      	; 0x132 <ds1302_shiftin+0x32>
        Bits--;
     132:	31 50       	subi	r19, 0x01	; 1
unsigned char ds1302_shiftin()
  {
    unsigned char Bits=8;
    unsigned int ui1=0;

    while (Bits)
     134:	31 11       	cpse	r19, r1
     136:	e8 cf       	rjmp	.-48     	; 0x108 <ds1302_shiftin+0x8>
        SCLK_PORT&=~_BV(SCLK_PIN);
        Delay_ns(DS1302_CL);
        Bits--;
      }
    return ui1;
  }
     138:	08 95       	ret

0000013a <ds1302_getbyte>:

unsigned char ds1302_getbyte(unsigned char AAddress)
  {
    unsigned char c1;

    CE_PORT|=_BV(CE_PIN);                                // Set CE high
     13a:	95 b1       	in	r25, 0x05	; 5
     13c:	94 60       	ori	r25, 0x04	; 4
     13e:	95 b9       	out	0x05, r25	; 5
    Delay_ns(DS1302_TCC);
     140:	95 e0       	ldi	r25, 0x05	; 5
     142:	9a 95       	dec	r25
     144:	f1 f7       	brne	.-4      	; 0x142 <ds1302_getbyte+0x8>
     146:	00 00       	nop
    ds1302_shiftout(AAddress | _BV(0));                  // Send command byte
     148:	81 60       	ori	r24, 0x01	; 1
     14a:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    c1=ds1302_shiftin();                                 // Get result
     14e:	0e 94 80 00 	call	0x100	; 0x100 <ds1302_shiftin>
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
     152:	95 b1       	in	r25, 0x05	; 5
     154:	9b 7f       	andi	r25, 0xFB	; 251
     156:	95 b9       	out	0x05, r25	; 5
    Delay_ns(DS1302_CWH);
     158:	95 e0       	ldi	r25, 0x05	; 5
     15a:	9a 95       	dec	r25
     15c:	f1 f7       	brne	.-4      	; 0x15a <ds1302_getbyte+0x20>
     15e:	00 00       	nop
    return c1;
  }
     160:	08 95       	ret

00000162 <ds1302_setbyte>:

void ds1302_setbyte(unsigned char AAddress, unsigned char AValue)
  {
     162:	cf 93       	push	r28
     164:	c6 2f       	mov	r28, r22
    CE_PORT|=_BV(CE_PIN);                                // Set CE high
     166:	95 b1       	in	r25, 0x05	; 5
     168:	94 60       	ori	r25, 0x04	; 4
     16a:	95 b9       	out	0x05, r25	; 5
    Delay_ns(DS1302_TCC);
     16c:	95 e0       	ldi	r25, 0x05	; 5
     16e:	9a 95       	dec	r25
     170:	f1 f7       	brne	.-4      	; 0x16e <ds1302_setbyte+0xc>
     172:	00 00       	nop
    ds1302_shiftout(AAddress & ~_BV(0));                 // Send command byte
     174:	8e 7f       	andi	r24, 0xFE	; 254
     176:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    ds1302_shiftout(AValue);                             // Send value
     17a:	8c 2f       	mov	r24, r28
     17c:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
     180:	85 b1       	in	r24, 0x05	; 5
     182:	8b 7f       	andi	r24, 0xFB	; 251
     184:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_CWH);
     186:	85 e0       	ldi	r24, 0x05	; 5
     188:	8a 95       	dec	r24
     18a:	f1 f7       	brne	.-4      	; 0x188 <ds1302_setbyte+0x26>
     18c:	00 00       	nop
  }
     18e:	cf 91       	pop	r28
     190:	08 95       	ret

00000192 <ds1302_reset_time>:
      ds1302_clear();                                    // Clear if no signature found
    return 1;                                            // Device is present
  }

void ds1302_reset_time()
  {
     192:	cf 93       	push	r28
    unsigned char c1;
    
    ds1302_setbyte(0x8e,0x00);                           // Disable WP
     194:	60 e0       	ldi	r22, 0x00	; 0
     196:	8e e8       	ldi	r24, 0x8E	; 142
     198:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
    ds1302_setbyte(0x90,TCS_REGISTER_DEFAULT);           // Set TCS to default
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	80 e9       	ldi	r24, 0x90	; 144
     1a0:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
    CE_PORT|=_BV(CE_PIN);                                // Set CE high
     1a4:	85 b1       	in	r24, 0x05	; 5
     1a6:	84 60       	ori	r24, 0x04	; 4
     1a8:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_TCC);
     1aa:	85 e0       	ldi	r24, 0x05	; 5
     1ac:	8a 95       	dec	r24
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <ds1302_reset_time+0x1a>
     1b0:	00 00       	nop
    ds1302_shiftout(0xbe);                               // Burst write of time sets all registers in sync with each other
     1b2:	8e eb       	ldi	r24, 0xBE	; 190
     1b4:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    for (c1=0;c1<8;c1++)
     1b8:	c0 e0       	ldi	r28, 0x00	; 0
     1ba:	09 c0       	rjmp	.+18     	; 0x1ce <ds1302_reset_time+0x3c>
      ds1302_shiftout(pgm_read_word(ResetTimeCode+c1));
     1bc:	ec 2f       	mov	r30, r28
     1be:	f0 e0       	ldi	r31, 0x00	; 0
     1c0:	e8 59       	subi	r30, 0x98	; 152
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	85 91       	lpm	r24, Z+
     1c6:	94 91       	lpm	r25, Z
     1c8:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    ds1302_setbyte(0x8e,0x00);                           // Disable WP
    ds1302_setbyte(0x90,TCS_REGISTER_DEFAULT);           // Set TCS to default
    CE_PORT|=_BV(CE_PIN);                                // Set CE high
    Delay_ns(DS1302_TCC);
    ds1302_shiftout(0xbe);                               // Burst write of time sets all registers in sync with each other
    for (c1=0;c1<8;c1++)
     1cc:	cf 5f       	subi	r28, 0xFF	; 255
     1ce:	c8 30       	cpi	r28, 0x08	; 8
     1d0:	a8 f3       	brcs	.-22     	; 0x1bc <ds1302_reset_time+0x2a>
      ds1302_shiftout(pgm_read_word(ResetTimeCode+c1));
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
     1d2:	85 b1       	in	r24, 0x05	; 5
     1d4:	8b 7f       	andi	r24, 0xFB	; 251
     1d6:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_CWH);
     1d8:	85 e0       	ldi	r24, 0x05	; 5
     1da:	8a 95       	dec	r24
     1dc:	f1 f7       	brne	.-4      	; 0x1da <ds1302_reset_time+0x48>
     1de:	00 00       	nop
    ds1302_setbyte(0x8e,0x80);                           // Reenable WP
     1e0:	60 e8       	ldi	r22, 0x80	; 128
     1e2:	8e e8       	ldi	r24, 0x8E	; 142
     1e4:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
  }
     1e8:	cf 91       	pop	r28
     1ea:	08 95       	ret

000001ec <ds1302_clear>:

void ds1302_clear()
  {
     1ec:	cf 93       	push	r28
    unsigned char c1;

    ds1302_reset_time();
     1ee:	0e 94 c9 00 	call	0x192	; 0x192 <ds1302_reset_time>
    ds1302_setbyte(0x8e,0x00);                           // Disable WP
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	8e e8       	ldi	r24, 0x8E	; 142
     1f6:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
    CE_PORT|=_BV(CE_PIN);                                // Set CE high
     1fa:	85 b1       	in	r24, 0x05	; 5
     1fc:	84 60       	ori	r24, 0x04	; 4
     1fe:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_TCC);
     200:	85 e0       	ldi	r24, 0x05	; 5
     202:	8a 95       	dec	r24
     204:	f1 f7       	brne	.-4      	; 0x202 <ds1302_clear+0x16>
     206:	00 00       	nop
    ds1302_shiftout(0xfe);                               // Burst write RAM
     208:	8e ef       	ldi	r24, 0xFE	; 254
     20a:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    for (c1=0;c1<28;c1++)                                // Set RAM to zeros
     20e:	c0 e0       	ldi	r28, 0x00	; 0
     210:	04 c0       	rjmp	.+8      	; 0x21a <ds1302_clear+0x2e>
      ds1302_shiftout(0);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    ds1302_reset_time();
    ds1302_setbyte(0x8e,0x00);                           // Disable WP
    CE_PORT|=_BV(CE_PIN);                                // Set CE high
    Delay_ns(DS1302_TCC);
    ds1302_shiftout(0xfe);                               // Burst write RAM
    for (c1=0;c1<28;c1++)                                // Set RAM to zeros
     218:	cf 5f       	subi	r28, 0xFF	; 255
     21a:	cc 31       	cpi	r28, 0x1C	; 28
     21c:	d0 f3       	brcs	.-12     	; 0x212 <ds1302_clear+0x26>
      ds1302_shiftout(0);
    ds1302_shiftout(SIG1);                               // Write signature to RAM
     21e:	89 ec       	ldi	r24, 0xC9	; 201
     220:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    ds1302_shiftout(SIG2);
     224:	89 ef       	ldi	r24, 0xF9	; 249
     226:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    ds1302_shiftout(SIG3);
     22a:	81 e3       	ldi	r24, 0x31	; 49
     22c:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
     230:	85 b1       	in	r24, 0x05	; 5
     232:	8b 7f       	andi	r24, 0xFB	; 251
     234:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_CWH);
     236:	85 e0       	ldi	r24, 0x05	; 5
     238:	8a 95       	dec	r24
     23a:	f1 f7       	brne	.-4      	; 0x238 <ds1302_clear+0x4c>
     23c:	00 00       	nop
    ds1302_setbyte(0x8e,0x80);                           // Reenable WP
     23e:	60 e8       	ldi	r22, 0x80	; 128
     240:	8e e8       	ldi	r24, 0x8E	; 142
     242:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
  }
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <ds1302_init>:
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
    Delay_ns(DS1302_CWH);
  }

unsigned char ds1302_init()
  {
     24a:	cf 93       	push	r28
    unsigned char c1,c2;

    CE_PORT&=~_BV(CE_PIN);                               // Default port configuration
     24c:	85 b1       	in	r24, 0x05	; 5
     24e:	8b 7f       	andi	r24, 0xFB	; 251
     250:	85 b9       	out	0x05, r24	; 5
    DDR(CE_PORT)|=_BV(CE_PIN);                           // CE output, low
     252:	84 b1       	in	r24, 0x04	; 4
     254:	84 60       	ori	r24, 0x04	; 4
     256:	84 b9       	out	0x04, r24	; 4
    SCLK_PORT&=~_BV(SCLK_PIN);                           // SCLK output, low
     258:	85 b1       	in	r24, 0x05	; 5
     25a:	8e 7f       	andi	r24, 0xFE	; 254
     25c:	85 b9       	out	0x05, r24	; 5
    DDR(SCLK_PORT)|=_BV(SCLK_PIN);
     25e:	84 b1       	in	r24, 0x04	; 4
     260:	81 60       	ori	r24, 0x01	; 1
     262:	84 b9       	out	0x04, r24	; 4
    SIO_PORT&=~_BV(SIO_PIN);                             // SIO input, no pullup
     264:	85 b1       	in	r24, 0x05	; 5
     266:	8d 7f       	andi	r24, 0xFD	; 253
     268:	85 b9       	out	0x05, r24	; 5
    DDR(SIO_PORT)&=~_BV(SIO_PIN);
     26a:	84 b1       	in	r24, 0x04	; 4
     26c:	8d 7f       	andi	r24, 0xFD	; 253
     26e:	84 b9       	out	0x04, r24	; 4

    c1=ds1302_getbyte(0x8f);                             // Test device presence (read WP byte)
     270:	8f e8       	ldi	r24, 0x8F	; 143
     272:	0e 94 9d 00 	call	0x13a	; 0x13a <ds1302_getbyte>
    if (c1!=0x00 && c1!=0x80)                            // Result should always be 0x00 or 0x80
     276:	88 23       	and	r24, r24
     278:	11 f0       	breq	.+4      	; 0x27e <ds1302_init+0x34>
     27a:	80 38       	cpi	r24, 0x80	; 128
     27c:	21 f5       	brne	.+72     	; 0x2c6 <ds1302_init+0x7c>
      return 0;
    c1^=_BV(7);                                          // Flip bit and see if we can write/reread it
     27e:	c0 e8       	ldi	r28, 0x80	; 128
     280:	c8 0f       	add	r28, r24
    ds1302_setbyte(0x8e,c1);
     282:	6c 2f       	mov	r22, r28
     284:	8e e8       	ldi	r24, 0x8E	; 142
     286:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
    c2=ds1302_getbyte(0x8f);
     28a:	8f e8       	ldi	r24, 0x8F	; 143
     28c:	0e 94 9d 00 	call	0x13a	; 0x13a <ds1302_getbyte>
    if (c1!=c2)                                          // New result should match written flipped bit
     290:	c8 13       	cpse	r28, r24
     292:	1b c0       	rjmp	.+54     	; 0x2ca <ds1302_init+0x80>
      return 0;
    if (!c2)
     294:	81 11       	cpse	r24, r1
     296:	04 c0       	rjmp	.+8      	; 0x2a0 <ds1302_init+0x56>
      ds1302_setbyte(0x8e,0x80);                         // Leave WP set
     298:	60 e8       	ldi	r22, 0x80	; 128
     29a:	8e e8       	ldi	r24, 0x8E	; 142
     29c:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>

    if (ds1302_getbyte(0xf9)!=SIG1 ||                    // Look for signature
     2a0:	89 ef       	ldi	r24, 0xF9	; 249
     2a2:	0e 94 9d 00 	call	0x13a	; 0x13a <ds1302_getbyte>
     2a6:	89 3c       	cpi	r24, 0xC9	; 201
     2a8:	51 f4       	brne	.+20     	; 0x2be <ds1302_init+0x74>
        ds1302_getbyte(0xfb)!=SIG2 ||
     2aa:	8b ef       	ldi	r24, 0xFB	; 251
     2ac:	0e 94 9d 00 	call	0x13a	; 0x13a <ds1302_getbyte>
    if (c1!=c2)                                          // New result should match written flipped bit
      return 0;
    if (!c2)
      ds1302_setbyte(0x8e,0x80);                         // Leave WP set

    if (ds1302_getbyte(0xf9)!=SIG1 ||                    // Look for signature
     2b0:	89 3f       	cpi	r24, 0xF9	; 249
     2b2:	29 f4       	brne	.+10     	; 0x2be <ds1302_init+0x74>
        ds1302_getbyte(0xfb)!=SIG2 ||
        ds1302_getbyte(0xfd)!=SIG3)
     2b4:	8d ef       	ldi	r24, 0xFD	; 253
     2b6:	0e 94 9d 00 	call	0x13a	; 0x13a <ds1302_getbyte>
      return 0;
    if (!c2)
      ds1302_setbyte(0x8e,0x80);                         // Leave WP set

    if (ds1302_getbyte(0xf9)!=SIG1 ||                    // Look for signature
        ds1302_getbyte(0xfb)!=SIG2 ||
     2ba:	81 33       	cpi	r24, 0x31	; 49
     2bc:	41 f0       	breq	.+16     	; 0x2ce <ds1302_init+0x84>
        ds1302_getbyte(0xfd)!=SIG3)
      ds1302_clear();                                    // Clear if no signature found
     2be:	0e 94 f6 00 	call	0x1ec	; 0x1ec <ds1302_clear>
    return 1;                                            // Device is present
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <ds1302_init+0x86>
    SIO_PORT&=~_BV(SIO_PIN);                             // SIO input, no pullup
    DDR(SIO_PORT)&=~_BV(SIO_PIN);

    c1=ds1302_getbyte(0x8f);                             // Test device presence (read WP byte)
    if (c1!=0x00 && c1!=0x80)                            // Result should always be 0x00 or 0x80
      return 0;
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	03 c0       	rjmp	.+6      	; 0x2d0 <ds1302_init+0x86>
    c1^=_BV(7);                                          // Flip bit and see if we can write/reread it
    ds1302_setbyte(0x8e,c1);
    c2=ds1302_getbyte(0x8f);
    if (c1!=c2)                                          // New result should match written flipped bit
      return 0;
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <ds1302_init+0x86>

    if (ds1302_getbyte(0xf9)!=SIG1 ||                    // Look for signature
        ds1302_getbyte(0xfb)!=SIG2 ||
        ds1302_getbyte(0xfd)!=SIG3)
      ds1302_clear();                                    // Clear if no signature found
    return 1;                                            // Device is present
     2ce:	81 e0       	ldi	r24, 0x01	; 1
  }
     2d0:	cf 91       	pop	r28
     2d2:	08 95       	ret

000002d4 <ds1302_get_time>:
    Delay_ns(DS1302_CWH);
    ds1302_setbyte(0x8e,0x80);                           // Reenable WP
  }

unsigned char ds1302_get_time(struct ymdhms_type *ATime)
  {
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ef 92       	push	r14
     2da:	ff 92       	push	r15
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
     2e6:	28 97       	sbiw	r28, 0x08	; 8
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	f8 94       	cli
     2ec:	de bf       	out	0x3e, r29	; 62
     2ee:	0f be       	out	0x3f, r0	; 63
     2f0:	cd bf       	out	0x3d, r28	; 61
     2f2:	6c 01       	movw	r12, r24
    unsigned char c1,s1[8];

    CE_PORT|=_BV(CE_PIN);                                // Set CE high
     2f4:	85 b1       	in	r24, 0x05	; 5
     2f6:	84 60       	ori	r24, 0x04	; 4
     2f8:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_TCC);
     2fa:	85 e0       	ldi	r24, 0x05	; 5
     2fc:	8a 95       	dec	r24
     2fe:	f1 f7       	brne	.-4      	; 0x2fc <ds1302_get_time+0x28>
     300:	00 00       	nop
    ds1302_shiftout(0xbf);                               // Burst read of time gets all registers in sync with each other
     302:	8f eb       	ldi	r24, 0xBF	; 191
     304:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    for (c1=0;c1<8;c1++)
     308:	10 e0       	ldi	r17, 0x00	; 0
     30a:	0c c0       	rjmp	.+24     	; 0x324 <ds1302_get_time+0x50>
      s1[c1]=ds1302_shiftin();
     30c:	e1 2e       	mov	r14, r17
     30e:	f1 2c       	mov	r15, r1
     310:	0e 94 80 00 	call	0x100	; 0x100 <ds1302_shiftin>
     314:	e1 e0       	ldi	r30, 0x01	; 1
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	ec 0f       	add	r30, r28
     31a:	fd 1f       	adc	r31, r29
     31c:	ee 0d       	add	r30, r14
     31e:	ff 1d       	adc	r31, r15
     320:	80 83       	st	Z, r24
    unsigned char c1,s1[8];

    CE_PORT|=_BV(CE_PIN);                                // Set CE high
    Delay_ns(DS1302_TCC);
    ds1302_shiftout(0xbf);                               // Burst read of time gets all registers in sync with each other
    for (c1=0;c1<8;c1++)
     322:	1f 5f       	subi	r17, 0xFF	; 255
     324:	18 30       	cpi	r17, 0x08	; 8
     326:	90 f3       	brcs	.-28     	; 0x30c <ds1302_get_time+0x38>
      s1[c1]=ds1302_shiftin();
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
     328:	85 b1       	in	r24, 0x05	; 5
     32a:	8b 7f       	andi	r24, 0xFB	; 251
     32c:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_CWH);
     32e:	e5 e0       	ldi	r30, 0x05	; 5
     330:	ea 95       	dec	r30
     332:	f1 f7       	brne	.-4      	; 0x330 <ds1302_get_time+0x5c>
     334:	00 00       	nop
    if (s1[0] & _BV(7))                                  // If CH is set then clock is not set, return 0
     336:	29 81       	ldd	r18, Y+1	; 0x01
     338:	22 23       	and	r18, r18
     33a:	0c f4       	brge	.+2      	; 0x33e <ds1302_get_time+0x6a>
     33c:	68 c0       	rjmp	.+208    	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
      return 0;
                                                         // Convert from BCD
    ATime->second=((s1[0] & (_BV(4)|_BV(5)|_BV(6)))>>4)*10         +(s1[0] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
     33e:	82 2f       	mov	r24, r18
     340:	80 77       	andi	r24, 0x70	; 112
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	95 95       	asr	r25
     346:	87 95       	ror	r24
     348:	95 95       	asr	r25
     34a:	87 95       	ror	r24
     34c:	95 95       	asr	r25
     34e:	87 95       	ror	r24
     350:	95 95       	asr	r25
     352:	87 95       	ror	r24
     354:	88 0f       	add	r24, r24
     356:	98 2f       	mov	r25, r24
     358:	99 0f       	add	r25, r25
     35a:	99 0f       	add	r25, r25
     35c:	89 0f       	add	r24, r25
     35e:	2f 70       	andi	r18, 0x0F	; 15
     360:	82 0f       	add	r24, r18
     362:	f6 01       	movw	r30, r12
     364:	87 83       	std	Z+7, r24	; 0x07
    ATime->minute1=((s1[1] & (_BV(4)|_BV(5)|_BV(6)))>>4);
     366:	2a 81       	ldd	r18, Y+2	; 0x02
     368:	82 2f       	mov	r24, r18
     36a:	80 77       	andi	r24, 0x70	; 112
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	95 95       	asr	r25
     370:	87 95       	ror	r24
     372:	95 95       	asr	r25
     374:	87 95       	ror	r24
     376:	95 95       	asr	r25
     378:	87 95       	ror	r24
     37a:	95 95       	asr	r25
     37c:	87 95       	ror	r24
     37e:	85 83       	std	Z+5, r24	; 0x05
    ATime->minute2= (s1[1] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
     380:	2f 70       	andi	r18, 0x0F	; 15
     382:	26 83       	std	Z+6, r18	; 0x06
    ATime->hour1  =((s1[2] & (_BV(4)|_BV(5)))>>4);
     384:	2b 81       	ldd	r18, Y+3	; 0x03
     386:	82 2f       	mov	r24, r18
     388:	80 73       	andi	r24, 0x30	; 48
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	95 95       	asr	r25
     38e:	87 95       	ror	r24
     390:	95 95       	asr	r25
     392:	87 95       	ror	r24
     394:	95 95       	asr	r25
     396:	87 95       	ror	r24
     398:	95 95       	asr	r25
     39a:	87 95       	ror	r24
     39c:	83 83       	std	Z+3, r24	; 0x03
	ATime->hour2  = (s1[2] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
     39e:	2f 70       	andi	r18, 0x0F	; 15
     3a0:	24 83       	std	Z+4, r18	; 0x04
    ATime->day   =((s1[3] & (_BV(4)|_BV(5)))>>4)*10                +(s1[3] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
     3a2:	2c 81       	ldd	r18, Y+4	; 0x04
     3a4:	82 2f       	mov	r24, r18
     3a6:	80 73       	andi	r24, 0x30	; 48
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	95 95       	asr	r25
     3ac:	87 95       	ror	r24
     3ae:	95 95       	asr	r25
     3b0:	87 95       	ror	r24
     3b2:	95 95       	asr	r25
     3b4:	87 95       	ror	r24
     3b6:	95 95       	asr	r25
     3b8:	87 95       	ror	r24
     3ba:	88 0f       	add	r24, r24
     3bc:	98 2f       	mov	r25, r24
     3be:	99 0f       	add	r25, r25
     3c0:	99 0f       	add	r25, r25
     3c2:	89 0f       	add	r24, r25
     3c4:	2f 70       	andi	r18, 0x0F	; 15
     3c6:	82 0f       	add	r24, r18
     3c8:	82 83       	std	Z+2, r24	; 0x02
    ATime->month =((s1[4] & (_BV(4)))>>4)*10                       +(s1[4] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
     3ca:	2d 81       	ldd	r18, Y+5	; 0x05
     3cc:	82 2f       	mov	r24, r18
     3ce:	80 71       	andi	r24, 0x10	; 16
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	95 95       	asr	r25
     3d4:	87 95       	ror	r24
     3d6:	95 95       	asr	r25
     3d8:	87 95       	ror	r24
     3da:	95 95       	asr	r25
     3dc:	87 95       	ror	r24
     3de:	95 95       	asr	r25
     3e0:	87 95       	ror	r24
     3e2:	88 0f       	add	r24, r24
     3e4:	98 2f       	mov	r25, r24
     3e6:	99 0f       	add	r25, r25
     3e8:	99 0f       	add	r25, r25
     3ea:	89 0f       	add	r24, r25
     3ec:	2f 70       	andi	r18, 0x0F	; 15
     3ee:	82 0f       	add	r24, r18
     3f0:	81 83       	std	Z+1, r24	; 0x01
    ATime->year  =((s1[6] & (_BV(4)|_BV(5)|_BV(6)|_BV(7)))>>4)*10  +(s1[6] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
     3f2:	8f 81       	ldd	r24, Y+7	; 0x07
     3f4:	98 2f       	mov	r25, r24
     3f6:	92 95       	swap	r25
     3f8:	9f 70       	andi	r25, 0x0F	; 15
     3fa:	99 0f       	add	r25, r25
     3fc:	29 2f       	mov	r18, r25
     3fe:	22 0f       	add	r18, r18
     400:	22 0f       	add	r18, r18
     402:	92 0f       	add	r25, r18
     404:	8f 70       	andi	r24, 0x0F	; 15
     406:	89 0f       	add	r24, r25
     408:	80 83       	st	Z, r24
    return 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	01 c0       	rjmp	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
    for (c1=0;c1<8;c1++)
      s1[c1]=ds1302_shiftin();
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
    Delay_ns(DS1302_CWH);
    if (s1[0] & _BV(7))                                  // If CH is set then clock is not set, return 0
      return 0;
     40e:	80 e0       	ldi	r24, 0x00	; 0
	ATime->hour2  = (s1[2] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
    ATime->day   =((s1[3] & (_BV(4)|_BV(5)))>>4)*10                +(s1[3] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
    ATime->month =((s1[4] & (_BV(4)))>>4)*10                       +(s1[4] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
    ATime->year  =((s1[6] & (_BV(4)|_BV(5)|_BV(6)|_BV(7)))>>4)*10  +(s1[6] & (_BV(0)|_BV(1)|_BV(2)|_BV(3)));
    return 1;
  }
     410:	28 96       	adiw	r28, 0x08	; 8
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	08 95       	ret

0000042c <ds1302_set_time>:

void ds1302_set_time(struct ymdhms_type *ATime)
  {
     42c:	1f 93       	push	r17
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	28 97       	sbiw	r28, 0x08	; 8
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	fc 01       	movw	r30, r24
    unsigned char c1,s1[8];
                                                         // Convert to BCD
    s1[0]=((ATime->second/10)<<4)+ATime->second%10;
     444:	87 81       	ldd	r24, Z+7	; 0x07
     446:	9d ec       	ldi	r25, 0xCD	; 205
     448:	89 9f       	mul	r24, r25
     44a:	21 2d       	mov	r18, r1
     44c:	11 24       	eor	r1, r1
     44e:	26 95       	lsr	r18
     450:	26 95       	lsr	r18
     452:	26 95       	lsr	r18
     454:	42 2f       	mov	r20, r18
     456:	44 0f       	add	r20, r20
     458:	34 2f       	mov	r19, r20
     45a:	33 0f       	add	r19, r19
     45c:	33 0f       	add	r19, r19
     45e:	34 0f       	add	r19, r20
     460:	83 1b       	sub	r24, r19
     462:	30 e1       	ldi	r19, 0x10	; 16
     464:	23 9f       	mul	r18, r19
     466:	80 0d       	add	r24, r0
     468:	11 24       	eor	r1, r1
     46a:	89 83       	std	Y+1, r24	; 0x01
    s1[1]=((ATime->minute1)<<4)+ATime->minute2%10;
     46c:	45 81       	ldd	r20, Z+5	; 0x05
     46e:	86 81       	ldd	r24, Z+6	; 0x06
     470:	89 9f       	mul	r24, r25
     472:	21 2d       	mov	r18, r1
     474:	11 24       	eor	r1, r1
     476:	26 95       	lsr	r18
     478:	26 95       	lsr	r18
     47a:	26 95       	lsr	r18
     47c:	22 0f       	add	r18, r18
     47e:	32 2f       	mov	r19, r18
     480:	33 0f       	add	r19, r19
     482:	33 0f       	add	r19, r19
     484:	23 0f       	add	r18, r19
     486:	82 1b       	sub	r24, r18
     488:	20 e1       	ldi	r18, 0x10	; 16
     48a:	42 9f       	mul	r20, r18
     48c:	80 0d       	add	r24, r0
     48e:	11 24       	eor	r1, r1
     490:	8a 83       	std	Y+2, r24	; 0x02
    s1[2]=((ATime->hour1)<<4)  +ATime->hour2%10;
     492:	43 81       	ldd	r20, Z+3	; 0x03
     494:	84 81       	ldd	r24, Z+4	; 0x04
     496:	89 9f       	mul	r24, r25
     498:	21 2d       	mov	r18, r1
     49a:	11 24       	eor	r1, r1
     49c:	26 95       	lsr	r18
     49e:	26 95       	lsr	r18
     4a0:	26 95       	lsr	r18
     4a2:	22 0f       	add	r18, r18
     4a4:	32 2f       	mov	r19, r18
     4a6:	33 0f       	add	r19, r19
     4a8:	33 0f       	add	r19, r19
     4aa:	23 0f       	add	r18, r19
     4ac:	82 1b       	sub	r24, r18
     4ae:	30 e1       	ldi	r19, 0x10	; 16
     4b0:	43 9f       	mul	r20, r19
     4b2:	80 0d       	add	r24, r0
     4b4:	11 24       	eor	r1, r1
     4b6:	8b 83       	std	Y+3, r24	; 0x03
    s1[3]=((ATime->day/10)<<4)   +ATime->day%10;
     4b8:	82 81       	ldd	r24, Z+2	; 0x02
     4ba:	89 9f       	mul	r24, r25
     4bc:	21 2d       	mov	r18, r1
     4be:	11 24       	eor	r1, r1
     4c0:	26 95       	lsr	r18
     4c2:	26 95       	lsr	r18
     4c4:	26 95       	lsr	r18
     4c6:	42 2f       	mov	r20, r18
     4c8:	44 0f       	add	r20, r20
     4ca:	34 2f       	mov	r19, r20
     4cc:	33 0f       	add	r19, r19
     4ce:	33 0f       	add	r19, r19
     4d0:	34 0f       	add	r19, r20
     4d2:	83 1b       	sub	r24, r19
     4d4:	30 e1       	ldi	r19, 0x10	; 16
     4d6:	23 9f       	mul	r18, r19
     4d8:	80 0d       	add	r24, r0
     4da:	11 24       	eor	r1, r1
     4dc:	8c 83       	std	Y+4, r24	; 0x04
    s1[4]=((ATime->month/10)<<4) +ATime->month%10;
     4de:	81 81       	ldd	r24, Z+1	; 0x01
     4e0:	89 9f       	mul	r24, r25
     4e2:	21 2d       	mov	r18, r1
     4e4:	11 24       	eor	r1, r1
     4e6:	26 95       	lsr	r18
     4e8:	26 95       	lsr	r18
     4ea:	26 95       	lsr	r18
     4ec:	42 2f       	mov	r20, r18
     4ee:	44 0f       	add	r20, r20
     4f0:	34 2f       	mov	r19, r20
     4f2:	33 0f       	add	r19, r19
     4f4:	33 0f       	add	r19, r19
     4f6:	34 0f       	add	r19, r20
     4f8:	83 1b       	sub	r24, r19
     4fa:	30 e1       	ldi	r19, 0x10	; 16
     4fc:	23 9f       	mul	r18, r19
     4fe:	80 0d       	add	r24, r0
     500:	11 24       	eor	r1, r1
     502:	8d 83       	std	Y+5, r24	; 0x05
    s1[6]=((ATime->year/10)<<4)  +ATime->year%10;
     504:	80 81       	ld	r24, Z
     506:	89 9f       	mul	r24, r25
     508:	91 2d       	mov	r25, r1
     50a:	11 24       	eor	r1, r1
     50c:	96 95       	lsr	r25
     50e:	96 95       	lsr	r25
     510:	96 95       	lsr	r25
     512:	39 2f       	mov	r19, r25
     514:	33 0f       	add	r19, r19
     516:	23 2f       	mov	r18, r19
     518:	22 0f       	add	r18, r18
     51a:	22 0f       	add	r18, r18
     51c:	23 0f       	add	r18, r19
     51e:	82 1b       	sub	r24, r18
     520:	20 e1       	ldi	r18, 0x10	; 16
     522:	92 9f       	mul	r25, r18
     524:	80 0d       	add	r24, r0
     526:	11 24       	eor	r1, r1
     528:	8f 83       	std	Y+7, r24	; 0x07
    s1[7]=0;
     52a:	18 86       	std	Y+8, r1	; 0x08

    ds1302_setbyte(0x8e,0x00);                           // Disable WP
     52c:	60 e0       	ldi	r22, 0x00	; 0
     52e:	8e e8       	ldi	r24, 0x8E	; 142
     530:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
    CE_PORT|=_BV(CE_PIN);                                // Set CE high
     534:	85 b1       	in	r24, 0x05	; 5
     536:	84 60       	ori	r24, 0x04	; 4
     538:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_TCC);
     53a:	35 e0       	ldi	r19, 0x05	; 5
     53c:	3a 95       	dec	r19
     53e:	f1 f7       	brne	.-4      	; 0x53c <ds1302_set_time+0x110>
     540:	00 00       	nop
    ds1302_shiftout(0xbe);                               // Burst write of time sets all registers in sync with each other
     542:	8e eb       	ldi	r24, 0xBE	; 190
     544:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>
    for (c1=0;c1<8;c1++)
     548:	10 e0       	ldi	r17, 0x00	; 0
     54a:	0a c0       	rjmp	.+20     	; 0x560 <ds1302_set_time+0x134>
      ds1302_shiftout(s1[c1]);
     54c:	e1 e0       	ldi	r30, 0x01	; 1
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	ec 0f       	add	r30, r28
     552:	fd 1f       	adc	r31, r29
     554:	e1 0f       	add	r30, r17
     556:	f1 1d       	adc	r31, r1
     558:	80 81       	ld	r24, Z
     55a:	0e 94 5f 00 	call	0xbe	; 0xbe <ds1302_shiftout>

    ds1302_setbyte(0x8e,0x00);                           // Disable WP
    CE_PORT|=_BV(CE_PIN);                                // Set CE high
    Delay_ns(DS1302_TCC);
    ds1302_shiftout(0xbe);                               // Burst write of time sets all registers in sync with each other
    for (c1=0;c1<8;c1++)
     55e:	1f 5f       	subi	r17, 0xFF	; 255
     560:	18 30       	cpi	r17, 0x08	; 8
     562:	a0 f3       	brcs	.-24     	; 0x54c <ds1302_set_time+0x120>
      ds1302_shiftout(s1[c1]);
    CE_PORT&=~_BV(CE_PIN);                               // Take CE back low
     564:	85 b1       	in	r24, 0x05	; 5
     566:	8b 7f       	andi	r24, 0xFB	; 251
     568:	85 b9       	out	0x05, r24	; 5
    Delay_ns(DS1302_CWH);
     56a:	85 e0       	ldi	r24, 0x05	; 5
     56c:	8a 95       	dec	r24
     56e:	f1 f7       	brne	.-4      	; 0x56c <ds1302_set_time+0x140>
     570:	00 00       	nop
    ds1302_setbyte(0x8e,0x80);                           // Reenable WP
     572:	60 e8       	ldi	r22, 0x80	; 128
     574:	8e e8       	ldi	r24, 0x8E	; 142
     576:	0e 94 b1 00 	call	0x162	; 0x162 <ds1302_setbyte>
  }
     57a:	28 96       	adiw	r28, 0x08	; 8
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	1f 91       	pop	r17
     58c:	08 95       	ret

0000058e <i2c_init>:
#include "i2c.h"


void i2c_init(void)
{
	TWBR = 0xFF;
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     594:	08 95       	ret

00000596 <i2c_start_condition>:
}

void i2c_start_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     596:	84 ea       	ldi	r24, 0xA4	; 164
     598:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0);
     59c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5a0:	88 23       	and	r24, r24
     5a2:	e4 f7       	brge	.-8      	; 0x59c <i2c_start_condition+0x6>
}
     5a4:	08 95       	ret

000005a6 <i2c_stop_condition>:

void i2c_stop_condition(void)
{
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     5a6:	84 e9       	ldi	r24, 0x94	; 148
     5a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5ac:	08 95       	ret

000005ae <i2c_send_byte>:
}

void i2c_send_byte(unsigned char byte)
{
	TWDR = byte;
     5ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1 << TWINT) | (1 << TWEN);
     5b2:	84 e8       	ldi	r24, 0x84	; 132
     5b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while ((TWCR & (1 << TWINT)) == 0);
     5b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     5bc:	88 23       	and	r24, r24
     5be:	e4 f7       	brge	.-8      	; 0x5b8 <i2c_send_byte+0xa>
}
     5c0:	08 95       	ret

000005c2 <i2c_send_packet>:

void i2c_send_packet(unsigned char value, unsigned char address)
{
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	c8 2f       	mov	r28, r24
     5c8:	d6 2f       	mov	r29, r22
	i2c_start_condition();
     5ca:	0e 94 cb 02 	call	0x596	; 0x596 <i2c_start_condition>
	i2c_send_byte(address);
     5ce:	8d 2f       	mov	r24, r29
     5d0:	0e 94 d7 02 	call	0x5ae	; 0x5ae <i2c_send_byte>
	i2c_send_byte(value);
     5d4:	8c 2f       	mov	r24, r28
     5d6:	0e 94 d7 02 	call	0x5ae	; 0x5ae <i2c_send_byte>
	i2c_stop_condition();
     5da:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <i2c_stop_condition>
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <ToggleRC>:

//Toggle all keypad pins. 
static void ToggleRC(void)
{
	//Toggle pin mode (Inputs <-> Outputs)
	PinModeToggle(Keypad_R0);
     5e4:	8a b1       	in	r24, 0x0a	; 10
     5e6:	61 e0       	ldi	r22, 0x01	; 1
     5e8:	86 27       	eor	r24, r22
     5ea:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_R1);
     5ec:	8a b1       	in	r24, 0x0a	; 10
     5ee:	52 e0       	ldi	r21, 0x02	; 2
     5f0:	85 27       	eor	r24, r21
     5f2:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_R2);
     5f4:	8a b1       	in	r24, 0x0a	; 10
     5f6:	44 e0       	ldi	r20, 0x04	; 4
     5f8:	84 27       	eor	r24, r20
     5fa:	8a b9       	out	0x0a, r24	; 10
	#if (__Keypad_Rows == 4)
		PinModeToggle(Keypad_R3);
     5fc:	8a b1       	in	r24, 0x0a	; 10
     5fe:	38 e0       	ldi	r19, 0x08	; 8
     600:	83 27       	eor	r24, r19
     602:	8a b9       	out	0x0a, r24	; 10
	#endif
	PinModeToggle(Keypad_C0);
     604:	8a b1       	in	r24, 0x0a	; 10
     606:	20 e1       	ldi	r18, 0x10	; 16
     608:	82 27       	eor	r24, r18
     60a:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_C1);
     60c:	8a b1       	in	r24, 0x0a	; 10
     60e:	90 e2       	ldi	r25, 0x20	; 32
     610:	89 27       	eor	r24, r25
     612:	8a b9       	out	0x0a, r24	; 10
	PinModeToggle(Keypad_C2);
     614:	7a b1       	in	r23, 0x0a	; 10
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	78 27       	eor	r23, r24
     61a:	7a b9       	out	0x0a, r23	; 10
	#if (__Keypad_Columns == 4)
		PinModeToggle(Keypad_C3);
     61c:	7a b1       	in	r23, 0x0a	; 10
     61e:	70 58       	subi	r23, 0x80	; 128
     620:	7a b9       	out	0x0a, r23	; 10
	#endif
	
	//Toggle pin level (High <-> Low)
	DigitalLevelToggle(Keypad_R0);
     622:	7b b1       	in	r23, 0x0b	; 11
     624:	67 27       	eor	r22, r23
     626:	6b b9       	out	0x0b, r22	; 11
	DigitalLevelToggle(Keypad_R1);
     628:	6b b1       	in	r22, 0x0b	; 11
     62a:	56 27       	eor	r21, r22
     62c:	5b b9       	out	0x0b, r21	; 11
	DigitalLevelToggle(Keypad_R2);
     62e:	5b b1       	in	r21, 0x0b	; 11
     630:	45 27       	eor	r20, r21
     632:	4b b9       	out	0x0b, r20	; 11
	#if (__Keypad_Rows == 4)
		DigitalLevelToggle(Keypad_R3);
     634:	4b b1       	in	r20, 0x0b	; 11
     636:	34 27       	eor	r19, r20
     638:	3b b9       	out	0x0b, r19	; 11
	#endif
	DigitalLevelToggle(Keypad_C0);
     63a:	3b b1       	in	r19, 0x0b	; 11
     63c:	23 27       	eor	r18, r19
     63e:	2b b9       	out	0x0b, r18	; 11
	DigitalLevelToggle(Keypad_C1);
     640:	2b b1       	in	r18, 0x0b	; 11
     642:	92 27       	eor	r25, r18
     644:	9b b9       	out	0x0b, r25	; 11
	DigitalLevelToggle(Keypad_C2);
     646:	9b b1       	in	r25, 0x0b	; 11
     648:	89 27       	eor	r24, r25
     64a:	8b b9       	out	0x0b, r24	; 11
	#if (__Keypad_Columns == 4)
		DigitalLevelToggle(Keypad_C3);
     64c:	8b b1       	in	r24, 0x0b	; 11
     64e:	80 58       	subi	r24, 0x80	; 128
     650:	8b b9       	out	0x0b, r24	; 11
     652:	08 95       	ret

00000654 <KP_Setup>:
//----- Functions ------------------------//
//Setup for keypad. 
void KP_Setup(void)
{
	//Input rows
	PinMode(Keypad_R0, Input);
     654:	8a b1       	in	r24, 0x0a	; 10
     656:	8e 7f       	andi	r24, 0xFE	; 254
     658:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_R1, Input);
     65a:	8a b1       	in	r24, 0x0a	; 10
     65c:	8d 7f       	andi	r24, 0xFD	; 253
     65e:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_R2, Input);
     660:	8a b1       	in	r24, 0x0a	; 10
     662:	8b 7f       	andi	r24, 0xFB	; 251
     664:	8a b9       	out	0x0a, r24	; 10
	#if (__Keypad_Rows == 4)
		PinMode(Keypad_R3, Input);
     666:	8a b1       	in	r24, 0x0a	; 10
     668:	87 7f       	andi	r24, 0xF7	; 247
     66a:	8a b9       	out	0x0a, r24	; 10
	#endif
	
	//Output columns
	PinMode(Keypad_C0, Output);
     66c:	8a b1       	in	r24, 0x0a	; 10
     66e:	80 61       	ori	r24, 0x10	; 16
     670:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_C1, Output);
     672:	8a b1       	in	r24, 0x0a	; 10
     674:	80 62       	ori	r24, 0x20	; 32
     676:	8a b9       	out	0x0a, r24	; 10
	PinMode(Keypad_C2, Output);
     678:	8a b1       	in	r24, 0x0a	; 10
     67a:	80 64       	ori	r24, 0x40	; 64
     67c:	8a b9       	out	0x0a, r24	; 10
	#if (__Keypad_Columns == 4)
		PinMode(Keypad_C3, Output);
     67e:	8a b1       	in	r24, 0x0a	; 10
     680:	80 68       	ori	r24, 0x80	; 128
     682:	8a b9       	out	0x0a, r24	; 10
	#endif
	
	//Pull-up resistor rows
	DigitalWrite(Keypad_R0, High);
     684:	8b b1       	in	r24, 0x0b	; 11
     686:	81 60       	ori	r24, 0x01	; 1
     688:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_R1, High);
     68a:	8b b1       	in	r24, 0x0b	; 11
     68c:	82 60       	ori	r24, 0x02	; 2
     68e:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_R2, High);
     690:	8b b1       	in	r24, 0x0b	; 11
     692:	84 60       	ori	r24, 0x04	; 4
     694:	8b b9       	out	0x0b, r24	; 11
	#if (__Keypad_Rows == 4)
		DigitalWrite(Keypad_R3, High);
     696:	8b b1       	in	r24, 0x0b	; 11
     698:	88 60       	ori	r24, 0x08	; 8
     69a:	8b b9       	out	0x0b, r24	; 11
	#endif
	
	//Low level outputs
	DigitalWrite(Keypad_C0, Low);
     69c:	8b b1       	in	r24, 0x0b	; 11
     69e:	8f 7e       	andi	r24, 0xEF	; 239
     6a0:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_C1, Low);
     6a2:	8b b1       	in	r24, 0x0b	; 11
     6a4:	8f 7d       	andi	r24, 0xDF	; 223
     6a6:	8b b9       	out	0x0b, r24	; 11
	DigitalWrite(Keypad_C2, Low);
     6a8:	8b b1       	in	r24, 0x0b	; 11
     6aa:	8f 7b       	andi	r24, 0xBF	; 191
     6ac:	8b b9       	out	0x0b, r24	; 11
	#if (__Keypad_Columns == 4)
		DigitalWrite(Keypad_C3, Low);
     6ae:	8b b1       	in	r24, 0x0b	; 11
     6b0:	8f 77       	andi	r24, 0x7F	; 127
     6b2:	8b b9       	out	0x0b, r24	; 11
     6b4:	08 95       	ret

000006b6 <KP_GetKey>:
		i = 0;
}

//Read key from keypad without debounce. Returns Key_0 to Key_F. 
enum KeypadKey_t KP_GetKey(void)
{
     6b6:	cf 93       	push	r28
     6b8:	df 93       	push	r29
     6ba:	00 d0       	rcall	.+0      	; 0x6bc <KP_GetKey+0x6>
     6bc:	00 d0       	rcall	.+0      	; 0x6be <KP_GetKey+0x8>
     6be:	1f 92       	push	r1
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
	volatile enum KeypadKey_t key = Key_None;
     6c4:	19 82       	std	Y+1, r1	; 0x01
	volatile uint8_t r, c;
	r = c = 0;
     6c6:	1b 82       	std	Y+3, r1	; 0x03
     6c8:	1a 82       	std	Y+2, r1	; 0x02
}

//Read keypad's rows. 
static inline uint8_t ReadRows(void)
{
	volatile uint8_t port = 0xF0;
     6ca:	80 ef       	ldi	r24, 0xF0	; 240
     6cc:	8d 83       	std	Y+5, r24	; 0x05

	//Read each pin to its respected place
	port |= DigitalRead(Keypad_R0);
     6ce:	89 b1       	in	r24, 0x09	; 9
     6d0:	81 70       	andi	r24, 0x01	; 1
     6d2:	9d 81       	ldd	r25, Y+5	; 0x05
     6d4:	89 2b       	or	r24, r25
     6d6:	8d 83       	std	Y+5, r24	; 0x05
	port |= DigitalRead(Keypad_R1)<<1;
     6d8:	89 b1       	in	r24, 0x09	; 9
     6da:	9d 81       	ldd	r25, Y+5	; 0x05
     6dc:	82 70       	andi	r24, 0x02	; 2
     6de:	89 2b       	or	r24, r25
     6e0:	8d 83       	std	Y+5, r24	; 0x05
	port |= DigitalRead(Keypad_R2)<<2;
     6e2:	89 b1       	in	r24, 0x09	; 9
     6e4:	9d 81       	ldd	r25, Y+5	; 0x05
     6e6:	84 70       	andi	r24, 0x04	; 4
     6e8:	89 2b       	or	r24, r25
     6ea:	8d 83       	std	Y+5, r24	; 0x05
	#if (__Keypad_Rows == 4)
		port |= DigitalRead(Keypad_R3)<<3;
     6ec:	89 b1       	in	r24, 0x09	; 9
     6ee:	9d 81       	ldd	r25, Y+5	; 0x05
     6f0:	88 70       	andi	r24, 0x08	; 8
     6f2:	89 2b       	or	r24, r25
     6f4:	8d 83       	std	Y+5, r24	; 0x05
	#else
		port = BitSet(port, 3);
	#endif
	
	return port;
     6f6:	8d 81       	ldd	r24, Y+5	; 0x05
	volatile uint8_t r, c;
	r = c = 0;
	
	//1. Check if button is pressed
	//Get rows' status
	r = ~ReadRows();
     6f8:	80 95       	com	r24
     6fa:	8a 83       	std	Y+2, r24	; 0x02
	if (r)
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	88 23       	and	r24, r24
     700:	09 f4       	brne	.+2      	; 0x704 <KP_GetKey+0x4e>
     702:	56 c0       	rjmp	.+172    	; 0x7b0 <KP_GetKey+0xfa>
	{
		//Get columns' status
		ToggleRC();
     704:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <ToggleRC>
}

//Read keypad's columns. 
static inline uint8_t ReadColumns(void)
{
	volatile uint8_t port = 0x0F;
     708:	8f e0       	ldi	r24, 0x0F	; 15
     70a:	8c 83       	std	Y+4, r24	; 0x04

	//Read each pin to its respected place
	port |= DigitalRead(Keypad_C0)<<4;
     70c:	89 b1       	in	r24, 0x09	; 9
     70e:	9c 81       	ldd	r25, Y+4	; 0x04
     710:	80 71       	andi	r24, 0x10	; 16
     712:	89 2b       	or	r24, r25
     714:	8c 83       	std	Y+4, r24	; 0x04
	port |= DigitalRead(Keypad_C1)<<5;
     716:	89 b1       	in	r24, 0x09	; 9
     718:	9c 81       	ldd	r25, Y+4	; 0x04
     71a:	80 72       	andi	r24, 0x20	; 32
     71c:	89 2b       	or	r24, r25
     71e:	8c 83       	std	Y+4, r24	; 0x04
	port |= DigitalRead(Keypad_C2)<<6;
     720:	89 b1       	in	r24, 0x09	; 9
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	80 74       	andi	r24, 0x40	; 64
     726:	89 2b       	or	r24, r25
     728:	8c 83       	std	Y+4, r24	; 0x04
	#if (__Keypad_Columns == 4)
		port |= DigitalRead(Keypad_C3)<<7;
     72a:	89 b1       	in	r24, 0x09	; 9
     72c:	9c 81       	ldd	r25, Y+4	; 0x04
     72e:	80 78       	andi	r24, 0x80	; 128
     730:	89 2b       	or	r24, r25
     732:	8c 83       	std	Y+4, r24	; 0x04
	#else
		port = BitSet(port, 7);
	#endif
	
	return port;
     734:	8c 81       	ldd	r24, Y+4	; 0x04
	r = ~ReadRows();
	if (r)
	{
		//Get columns' status
		ToggleRC();
		c = ~ReadColumns();
     736:	80 95       	com	r24
     738:	8b 83       	std	Y+3, r24	; 0x03
		ToggleRC();
     73a:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <ToggleRC>
		
		//2. Find the row
		if (BitCheck(r, 0))
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	80 ff       	sbrs	r24, 0
     742:	02 c0       	rjmp	.+4      	; 0x748 <KP_GetKey+0x92>
			r = 0;
     744:	1a 82       	std	Y+2, r1	; 0x02
     746:	11 c0       	rjmp	.+34     	; 0x76a <KP_GetKey+0xb4>
		else if (BitCheck(r, 1))
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	81 ff       	sbrs	r24, 1
     74c:	03 c0       	rjmp	.+6      	; 0x754 <KP_GetKey+0x9e>
			r = 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	8a 83       	std	Y+2, r24	; 0x02
     752:	0b c0       	rjmp	.+22     	; 0x76a <KP_GetKey+0xb4>
		else if (BitCheck(r, 2))
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	82 ff       	sbrs	r24, 2
     758:	03 c0       	rjmp	.+6      	; 0x760 <KP_GetKey+0xaa>
		r = 2;
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	8a 83       	std	Y+2, r24	; 0x02
     75e:	05 c0       	rjmp	.+10     	; 0x76a <KP_GetKey+0xb4>
		#if (__Keypad_Rows ==  4)
			else if (BitCheck(r, 3))
     760:	8a 81       	ldd	r24, Y+2	; 0x02
     762:	83 ff       	sbrs	r24, 3
     764:	02 c0       	rjmp	.+4      	; 0x76a <KP_GetKey+0xb4>
				r = 3;
     766:	83 e0       	ldi	r24, 0x03	; 3
     768:	8a 83       	std	Y+2, r24	; 0x02
		#endif
		
		//3. Find the column
		if (BitCheck(c, 4))
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	84 ff       	sbrs	r24, 4
     76e:	02 c0       	rjmp	.+4      	; 0x774 <KP_GetKey+0xbe>
			c = 0;
     770:	1b 82       	std	Y+3, r1	; 0x03
     772:	11 c0       	rjmp	.+34     	; 0x796 <KP_GetKey+0xe0>
		else if (BitCheck(c, 5))
     774:	8b 81       	ldd	r24, Y+3	; 0x03
     776:	85 ff       	sbrs	r24, 5
     778:	03 c0       	rjmp	.+6      	; 0x780 <KP_GetKey+0xca>
			c = 1;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	8b 83       	std	Y+3, r24	; 0x03
     77e:	0b c0       	rjmp	.+22     	; 0x796 <KP_GetKey+0xe0>
		else if (BitCheck(c, 6))
     780:	8b 81       	ldd	r24, Y+3	; 0x03
     782:	86 ff       	sbrs	r24, 6
     784:	03 c0       	rjmp	.+6      	; 0x78c <KP_GetKey+0xd6>
			c = 2;
     786:	82 e0       	ldi	r24, 0x02	; 2
     788:	8b 83       	std	Y+3, r24	; 0x03
     78a:	05 c0       	rjmp	.+10     	; 0x796 <KP_GetKey+0xe0>
		#if (__Keypad_Columns == 4)
			else if (BitCheck(c, 7))
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	88 23       	and	r24, r24
     790:	14 f4       	brge	.+4      	; 0x796 <KP_GetKey+0xe0>
				c = 3;
     792:	83 e0       	ldi	r24, 0x03	; 3
     794:	8b 83       	std	Y+3, r24	; 0x03
		#endif
		
		//Read key from keypad map
		key = pgm_read_byte(&(__KP_Map[r][c]));
     796:	ea 81       	ldd	r30, Y+2	; 0x02
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	8b 81       	ldd	r24, Y+3	; 0x03
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e8 0f       	add	r30, r24
     7a6:	f1 1d       	adc	r31, r1
     7a8:	e0 59       	subi	r30, 0x90	; 144
     7aa:	ff 4f       	sbci	r31, 0xFF	; 255
     7ac:	e4 91       	lpm	r30, Z
     7ae:	e9 83       	std	Y+1, r30	; 0x01
	}
	
	return key;
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
}
     7b2:	0f 90       	pop	r0
     7b4:	0f 90       	pop	r0
     7b6:	0f 90       	pop	r0
     7b8:	0f 90       	pop	r0
     7ba:	0f 90       	pop	r0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <putnibble>:
	uint8_t led_pin;
} lcd;


void putnibble(char t)
{
     7c2:	cf 93       	push	r28
	t <<= 4;
     7c4:	c8 2f       	mov	r28, r24
     7c6:	c2 95       	swap	r28
     7c8:	c0 7f       	andi	r28, 0xF0	; 240
	i2c_send_packet(lcd.led_pin |= 0x04, SLA_W);
     7ca:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     7ce:	84 60       	ori	r24, 0x04	; 4
     7d0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
     7d4:	6e e4       	ldi	r22, 0x4E	; 78
     7d6:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	8a 95       	dec	r24
     7de:	f1 f7       	brne	.-4      	; 0x7dc <putnibble+0x1a>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <putnibble+0x20>
	_delay_us(50);
	i2c_send_packet(lcd.led_pin | t, SLA_W);
     7e2:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     7e6:	6e e4       	ldi	r22, 0x4E	; 78
     7e8:	8c 2b       	or	r24, r28
     7ea:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
	i2c_send_packet(lcd.led_pin &= ~0x04, SLA_W);
     7ee:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     7f2:	8b 7f       	andi	r24, 0xFB	; 251
     7f4:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
     7f8:	6e e4       	ldi	r22, 0x4E	; 78
     7fa:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
     7fe:	80 e1       	ldi	r24, 0x10	; 16
     800:	8a 95       	dec	r24
     802:	f1 f7       	brne	.-4      	; 0x800 <__DATA_REGION_LENGTH__>
     804:	00 c0       	rjmp	.+0      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	_delay_us(50);
}
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <lcd1602_send_byte>:

void lcd1602_send_byte(char c, char rs)
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	c8 2f       	mov	r28, r24
	char highc = 0;
	highc = c >> 4;
     810:	d8 2f       	mov	r29, r24
     812:	d2 95       	swap	r29
     814:	df 70       	andi	r29, 0x0F	; 15
	if (rs == LCD_COMMAND)
     816:	61 11       	cpse	r22, r1
     818:	09 c0       	rjmp	.+18     	; 0x82c <lcd1602_send_byte+0x22>
		i2c_send_packet(lcd.led_pin &=~ 0x01, SLA_W);
     81a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     81e:	8e 7f       	andi	r24, 0xFE	; 254
     820:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
     824:	6e e4       	ldi	r22, 0x4E	; 78
     826:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
     82a:	08 c0       	rjmp	.+16     	; 0x83c <lcd1602_send_byte+0x32>
	else
		i2c_send_packet(lcd.led_pin |= 0x01, SLA_W);
     82c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     830:	81 60       	ori	r24, 0x01	; 1
     832:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
     836:	6e e4       	ldi	r22, 0x4E	; 78
     838:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
	putnibble(highc);
     83c:	8d 2f       	mov	r24, r29
     83e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
	putnibble(c);
     842:	8c 2f       	mov	r24, r28
     844:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
}
     848:	df 91       	pop	r29
     84a:	cf 91       	pop	r28
     84c:	08 95       	ret

0000084e <lcd1602_send_char>:

void lcd1602_send_char(char c)
{
     84e:	cf 93       	push	r28
     850:	df 93       	push	r29
     852:	c8 2f       	mov	r28, r24
	char highc = 0;

	highc = c >> 4;
     854:	d8 2f       	mov	r29, r24
     856:	d2 95       	swap	r29
     858:	df 70       	andi	r29, 0x0F	; 15
	i2c_send_packet (lcd.led_pin |= 0x01, SLA_W);
     85a:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     85e:	81 60       	ori	r24, 0x01	; 1
     860:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
     864:	6e e4       	ldi	r22, 0x4E	; 78
     866:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
	putnibble(highc);
     86a:	8d 2f       	mov	r24, r29
     86c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
	putnibble(c);
     870:	8c 2f       	mov	r24, r28
     872:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
}
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <lcd1602_init>:

void lcd1602_init()
{
	lcd.led_pin = 0;
     87c:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
	i2c_init();
     880:	0e 94 c7 02 	call	0x58e	; 0x58e <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     884:	85 ea       	ldi	r24, 0xA5	; 165
     886:	9e e0       	ldi	r25, 0x0E	; 14
     888:	01 97       	sbiw	r24, 0x01	; 1
     88a:	f1 f7       	brne	.-4      	; 0x888 <lcd1602_init+0xc>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <lcd1602_init+0x12>
     88e:	00 00       	nop
	_delay_ms(15);
	putnibble(0b00000011);
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
     896:	87 ee       	ldi	r24, 0xE7	; 231
     898:	93 e0       	ldi	r25, 0x03	; 3
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	f1 f7       	brne	.-4      	; 0x89a <lcd1602_init+0x1e>
     89e:	00 c0       	rjmp	.+0      	; 0x8a0 <lcd1602_init+0x24>
     8a0:	00 00       	nop
	_delay_ms(4);
	putnibble(0b00000011);
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a8:	91 e2       	ldi	r25, 0x21	; 33
     8aa:	9a 95       	dec	r25
     8ac:	f1 f7       	brne	.-4      	; 0x8aa <lcd1602_init+0x2e>
     8ae:	00 00       	nop
	_delay_us(100);
	putnibble(0b00000011);
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8b6:	89 ef       	ldi	r24, 0xF9	; 249
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <lcd1602_init+0x3e>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <lcd1602_init+0x44>
     8c0:	00 00       	nop
	_delay_ms(1);
	putnibble(0b00000010);
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <putnibble>
     8c8:	89 ef       	ldi	r24, 0xF9	; 249
     8ca:	90 e0       	ldi	r25, 0x00	; 0
     8cc:	01 97       	sbiw	r24, 0x01	; 1
     8ce:	f1 f7       	brne	.-4      	; 0x8cc <lcd1602_init+0x50>
     8d0:	00 c0       	rjmp	.+0      	; 0x8d2 <lcd1602_init+0x56>
     8d2:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x28, LCD_COMMAND);
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	88 e2       	ldi	r24, 0x28	; 40
     8d8:	0e 94 05 04 	call	0x80a	; 0x80a <lcd1602_send_byte>
     8dc:	89 ef       	ldi	r24, 0xF9	; 249
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <lcd1602_init+0x64>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <lcd1602_init+0x6a>
     8e6:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x0C, LCD_COMMAND);
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	8c e0       	ldi	r24, 0x0C	; 12
     8ec:	0e 94 05 04 	call	0x80a	; 0x80a <lcd1602_send_byte>
     8f0:	89 ef       	ldi	r24, 0xF9	; 249
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <lcd1602_init+0x78>
     8f8:	00 c0       	rjmp	.+0      	; 0x8fa <lcd1602_init+0x7e>
     8fa:	00 00       	nop
	_delay_ms(1);
	lcd1602_send_byte(0x06, LCD_COMMAND);
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	86 e0       	ldi	r24, 0x06	; 6
     900:	0e 94 05 04 	call	0x80a	; 0x80a <lcd1602_send_byte>
     904:	89 ef       	ldi	r24, 0xF9	; 249
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	01 97       	sbiw	r24, 0x01	; 1
     90a:	f1 f7       	brne	.-4      	; 0x908 <__stack+0x9>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <__stack+0xf>
     90e:	00 00       	nop
	_delay_ms(1);
	i2c_send_packet(lcd.led_pin |= 0x08, SLA_W);
     910:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     914:	88 60       	ori	r24, 0x08	; 8
     916:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
     91a:	6e e4       	ldi	r22, 0x4E	; 78
     91c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
	i2c_send_packet(lcd.led_pin &=~ 0x02, SLA_W);
     920:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
     924:	8d 7f       	andi	r24, 0xFD	; 253
     926:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
     92a:	6e e4       	ldi	r22, 0x4E	; 78
     92c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <i2c_send_packet>
     930:	08 95       	ret

00000932 <lcd1602_clear>:
}

void lcd1602_clear()
{
	lcd1602_send_byte(0x01, LCD_COMMAND);
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 05 04 	call	0x80a	; 0x80a <lcd1602_send_byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93a:	86 e7       	ldi	r24, 0x76	; 118
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <lcd1602_clear+0xc>
     942:	00 c0       	rjmp	.+0      	; 0x944 <lcd1602_clear+0x12>
     944:	00 00       	nop
     946:	08 95       	ret

00000948 <lcd1602_goto_xy>:

void lcd1602_goto_xy(char col, char row)
{
	char adr;

	adr = 0x40*row + col;
     948:	90 e4       	ldi	r25, 0x40	; 64
     94a:	69 9f       	mul	r22, r25
     94c:	80 0d       	add	r24, r0
     94e:	11 24       	eor	r1, r1
	adr |= 0x80;
	lcd1602_send_byte(adr, LCD_COMMAND);
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	80 68       	ori	r24, 0x80	; 128
     954:	0e 94 05 04 	call	0x80a	; 0x80a <lcd1602_send_byte>
     958:	08 95       	ret

0000095a <lcd1602_send_string>:
}

void lcd1602_send_string(const char *str)
{
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
     960:	8c 01       	movw	r16, r24
	uint8_t i;

	for(i = 0; str[i] != '\0'; i++)
     962:	c0 e0       	ldi	r28, 0x00	; 0
     964:	03 c0       	rjmp	.+6      	; 0x96c <lcd1602_send_string+0x12>
		lcd1602_send_char(str[i]);
     966:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>

void lcd1602_send_string(const char *str)
{
	uint8_t i;

	for(i = 0; str[i] != '\0'; i++)
     96a:	cf 5f       	subi	r28, 0xFF	; 255
     96c:	f8 01       	movw	r30, r16
     96e:	ec 0f       	add	r30, r28
     970:	f1 1d       	adc	r31, r1
     972:	80 81       	ld	r24, Z
     974:	81 11       	cpse	r24, r1
     976:	f7 cf       	rjmp	.-18     	; 0x966 <lcd1602_send_string+0xc>
		lcd1602_send_char(str[i]);
}
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	08 95       	ret

00000980 <DHT11Setup>:
	// Humidity average
	DHT11Data[0] = bufferRH / DHT_NR_OF_SAMPLES;
	
	// Temperature average
	DHT11Data[2] = (bufferTemp / DHT_NR_OF_SAMPLES) + DHT_TEMP_ERROR_OFFSET;
}
     980:	2f ef       	ldi	r18, 0xFF	; 255
     982:	87 ea       	ldi	r24, 0xA7	; 167
     984:	91 e6       	ldi	r25, 0x61	; 97
     986:	21 50       	subi	r18, 0x01	; 1
     988:	80 40       	sbci	r24, 0x00	; 0
     98a:	90 40       	sbci	r25, 0x00	; 0
     98c:	e1 f7       	brne	.-8      	; 0x986 <DHT11Setup+0x6>
     98e:	00 c0       	rjmp	.+0      	; 0x990 <DHT11Setup+0x10>
     990:	00 00       	nop
     992:	84 b1       	in	r24, 0x04	; 4
     994:	88 60       	ori	r24, 0x08	; 8
     996:	84 b9       	out	0x04, r24	; 4
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <DHT11Init>
     99e:	08 95       	ret

000009a0 <DHT11DisplayTemperature>:
     9a0:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <DHT11Data+0x2>
     9a4:	08 95       	ret

000009a6 <DHT11DisplayHumidity>:
     9a6:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <DHT11Data>
     9aa:	08 95       	ret

000009ac <DHT11ReadData>:
     9ac:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <DHT11Init>
     9b0:	81 11       	cpse	r24, r1
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DHT11ReadData+0xc>
     9b4:	0e 94 c0 04 	call	0x980	; 0x980 <DHT11Setup>
     9b8:	84 b1       	in	r24, 0x04	; 4
     9ba:	88 60       	ori	r24, 0x08	; 8
     9bc:	84 b9       	out	0x04, r24	; 4
     9be:	85 b1       	in	r24, 0x05	; 5
     9c0:	87 7f       	andi	r24, 0xF7	; 247
     9c2:	85 b9       	out	0x05, r24	; 5
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
     9c6:	89 ef       	ldi	r24, 0xF9	; 249
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	80 40       	sbci	r24, 0x00	; 0
     9ce:	90 40       	sbci	r25, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <DHT11ReadData+0x1e>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <DHT11ReadData+0x28>
     9d4:	00 00       	nop
     9d6:	84 b1       	in	r24, 0x04	; 4
     9d8:	87 7f       	andi	r24, 0xF7	; 247
     9da:	84 b9       	out	0x04, r24	; 4
     9dc:	2a ea       	ldi	r18, 0xAA	; 170
     9de:	2a 95       	dec	r18
     9e0:	f1 f7       	brne	.-4      	; 0x9de <DHT11ReadData+0x32>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <DHT11ReadData+0x38>
     9e4:	1b 99       	sbic	0x03, 3	; 3
     9e6:	67 c0       	rjmp	.+206    	; 0xab6 <DHT11ReadData+0x10a>
     9e8:	87 e4       	ldi	r24, 0x47	; 71
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	01 97       	sbiw	r24, 0x01	; 1
     9ee:	f1 f7       	brne	.-4      	; 0x9ec <DHT11ReadData+0x40>
     9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <DHT11ReadData+0x46>
     9f2:	00 00       	nop
     9f4:	1b 9b       	sbis	0x03, 3	; 3
     9f6:	61 c0       	rjmp	.+194    	; 0xaba <DHT11ReadData+0x10e>
     9f8:	87 e4       	ldi	r24, 0x47	; 71
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	01 97       	sbiw	r24, 0x01	; 1
     9fe:	f1 f7       	brne	.-4      	; 0x9fc <DHT11ReadData+0x50>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <DHT11ReadData+0x56>
     a02:	00 00       	nop
     a04:	1b 99       	sbic	0x03, 3	; 3
     a06:	5b c0       	rjmp	.+182    	; 0xabe <DHT11ReadData+0x112>
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	36 c0       	rjmp	.+108    	; 0xa78 <DHT11ReadData+0xcc>
     a0c:	8f 5f       	subi	r24, 0xFF	; 255
     a0e:	89 30       	cpi	r24, 0x09	; 9
     a10:	40 f4       	brcc	.+16     	; 0xa22 <DHT11ReadData+0x76>
     a12:	25 e3       	ldi	r18, 0x35	; 53
     a14:	2a 95       	dec	r18
     a16:	f1 f7       	brne	.-4      	; 0xa14 <DHT11ReadData+0x68>
     a18:	00 00       	nop
     a1a:	01 c0       	rjmp	.+2      	; 0xa1e <DHT11ReadData+0x72>
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	1b 9b       	sbis	0x03, 3	; 3
     a20:	f5 cf       	rjmp	.-22     	; 0xa0c <DHT11ReadData+0x60>
     a22:	1b 9b       	sbis	0x03, 3	; 3
     a24:	4e c0       	rjmp	.+156    	; 0xac2 <DHT11ReadData+0x116>
     a26:	85 ed       	ldi	r24, 0xD5	; 213
     a28:	8a 95       	dec	r24
     a2a:	f1 f7       	brne	.-4      	; 0xa28 <DHT11ReadData+0x7c>
     a2c:	00 00       	nop
     a2e:	1b 9b       	sbis	0x03, 3	; 3
     a30:	0c c0       	rjmp	.+24     	; 0xa4a <DHT11ReadData+0x9e>
     a32:	47 e0       	ldi	r20, 0x07	; 7
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	49 1b       	sub	r20, r25
     a38:	51 09       	sbc	r21, r1
     a3a:	21 e0       	ldi	r18, 0x01	; 1
     a3c:	30 e0       	ldi	r19, 0x00	; 0
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <DHT11ReadData+0x98>
     a40:	22 0f       	add	r18, r18
     a42:	33 1f       	adc	r19, r19
     a44:	4a 95       	dec	r20
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <DHT11ReadData+0x94>
     a48:	62 2b       	or	r22, r18
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	07 c0       	rjmp	.+14     	; 0xa5c <DHT11ReadData+0xb0>
     a4e:	8f 5f       	subi	r24, 0xFF	; 255
     a50:	89 30       	cpi	r24, 0x09	; 9
     a52:	30 f4       	brcc	.+12     	; 0xa60 <DHT11ReadData+0xb4>
     a54:	25 e3       	ldi	r18, 0x35	; 53
     a56:	2a 95       	dec	r18
     a58:	f1 f7       	brne	.-4      	; 0xa56 <DHT11ReadData+0xaa>
     a5a:	00 00       	nop
     a5c:	1b 99       	sbic	0x03, 3	; 3
     a5e:	f7 cf       	rjmp	.-18     	; 0xa4e <DHT11ReadData+0xa2>
     a60:	9f 5f       	subi	r25, 0xFF	; 255
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <DHT11ReadData+0xbc>
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	98 30       	cpi	r25, 0x08	; 8
     a6a:	c0 f2       	brcs	.-80     	; 0xa1c <DHT11ReadData+0x70>
     a6c:	e7 2f       	mov	r30, r23
     a6e:	f0 e0       	ldi	r31, 0x00	; 0
     a70:	ea 5d       	subi	r30, 0xDA	; 218
     a72:	fe 4f       	sbci	r31, 0xFE	; 254
     a74:	60 83       	st	Z, r22
     a76:	7f 5f       	subi	r23, 0xFF	; 255
     a78:	75 30       	cpi	r23, 0x05	; 5
     a7a:	a0 f3       	brcs	.-24     	; 0xa64 <DHT11ReadData+0xb8>
     a7c:	8f ee       	ldi	r24, 0xEF	; 239
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <DHT11ReadData+0xd4>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <DHT11ReadData+0xda>
     a86:	00 00       	nop
     a88:	e6 e2       	ldi	r30, 0x26	; 38
     a8a:	f1 e0       	ldi	r31, 0x01	; 1
     a8c:	30 81       	ld	r19, Z
     a8e:	81 81       	ldd	r24, Z+1	; 0x01
     a90:	22 81       	ldd	r18, Z+2	; 0x02
     a92:	93 81       	ldd	r25, Z+3	; 0x03
     a94:	83 0f       	add	r24, r19
     a96:	82 0f       	add	r24, r18
     a98:	89 0f       	add	r24, r25
     a9a:	94 81       	ldd	r25, Z+4	; 0x04
     a9c:	89 13       	cpse	r24, r25
     a9e:	13 c0       	rjmp	.+38     	; 0xac6 <DHT11ReadData+0x11a>
     aa0:	9f ef       	ldi	r25, 0xFF	; 255
     aa2:	27 ea       	ldi	r18, 0xA7	; 167
     aa4:	81 e6       	ldi	r24, 0x61	; 97
     aa6:	91 50       	subi	r25, 0x01	; 1
     aa8:	20 40       	sbci	r18, 0x00	; 0
     aaa:	80 40       	sbci	r24, 0x00	; 0
     aac:	e1 f7       	brne	.-8      	; 0xaa6 <DHT11ReadData+0xfa>
     aae:	00 c0       	rjmp	.+0      	; 0xab0 <DHT11ReadData+0x104>
     ab0:	00 00       	nop
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	08 95       	ret
     ab6:	80 e0       	ldi	r24, 0x00	; 0
     ab8:	08 95       	ret
     aba:	80 e0       	ldi	r24, 0x00	; 0
     abc:	08 95       	ret
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	08 95       	ret
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret
     ac6:	8f ef       	ldi	r24, 0xFF	; 255
     ac8:	08 95       	ret

00000aca <main>:


int main(void)
{
	
	DDRB|=(1<<PORTB4);
     aca:	84 b1       	in	r24, 0x04	; 4
     acc:	80 61       	ori	r24, 0x10	; 16
     ace:	84 b9       	out	0x04, r24	; 4
	PORTB&=~(1<<PORTB4);
     ad0:	85 b1       	in	r24, 0x05	; 5
     ad2:	8f 7e       	andi	r24, 0xEF	; 239
     ad4:	85 b9       	out	0x05, r24	; 5
	
	
	///keypad
		
		key = Key_None;	
     ad6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <key>
		alarm_durum=0;
     ada:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <alarm_durum>
		alarm_kur=0;
     ade:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <alarm_kur>
		say_=0;
     ae2:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <say_>
		saat1_=0;
     ae6:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <saat1_>
		saat2_=0;
     aea:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <saat2_>
		dakika1_=0;
     aee:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <dakika1_>
		dakika2_=0;
     af2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <dakika2_>
		alarm_cal=0;
     af6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <alarm_cal>
		
		KP_Setup();
     afa:	0e 94 2a 03 	call	0x654	; 0x654 <KP_Setup>
	


	///lcd
	
	lcd1602_init();
     afe:	0e 94 3e 04 	call	0x87c	; 0x87c <lcd1602_init>
	lcd1602_clear();
     b02:	0e 94 99 04 	call	0x932	; 0x932 <lcd1602_clear>
   
	
  
	///saat
	
	if (ds1302_init())
     b06:	0e 94 25 01 	call	0x24a	; 0x24a <ds1302_init>
     b0a:	88 23       	and	r24, r24
     b0c:	21 f0       	breq	.+8      	; 0xb16 <main+0x4c>
	{
		//saat hazır
		saat_hazir=1;
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <saat_hazir>
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <main+0x50>

	}
	else
	{
		//saat hazır değil bekle
		saat_hazir=0;
     b16:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <saat_hazir>

   ////
   
    while (1) 
    {
		if (saat_hazir==1)//saat hazır ise
     b1a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <saat_hazir>
     b1e:	81 30       	cpi	r24, 0x01	; 1
     b20:	e1 f7       	brne	.-8      	; 0xb1a <main+0x50>
		


		 
			
			if (alarm_durum!=1)
     b22:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <alarm_durum>
     b26:	81 30       	cpi	r24, 0x01	; 1
     b28:	09 f4       	brne	.+2      	; 0xb2c <main+0x62>
     b2a:	ae c0       	rjmp	.+348    	; 0xc88 <main+0x1be>
			{
				DHTreturnCode = DHT11ReadData(); ///dht11 oku
     b2c:	0e 94 d6 04 	call	0x9ac	; 0x9ac <DHT11ReadData>
     b30:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <DHTreturnCode>
			
		
			
		
			if (ds1302_get_time(&mytime))
     b34:	82 e7       	ldi	r24, 0x72	; 114
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <ds1302_get_time>
     b3c:	88 23       	and	r24, r24
     b3e:	09 f4       	brne	.+2      	; 0xb42 <main+0x78>
     b40:	6a c0       	rjmp	.+212    	; 0xc16 <main+0x14c>
			{
				//zaman var
				
				lcd1602_clear();
     b42:	0e 94 99 04 	call	0x932	; 0x932 <lcd1602_clear>
			    Delay_ns(1500); 
     b46:	28 e0       	ldi	r18, 0x08	; 8
     b48:	2a 95       	dec	r18
     b4a:	f1 f7       	brne	.-4      	; 0xb48 <main+0x7e>
     b4c:	00 00       	nop
				
				lcd1602_goto_xy(0,0);
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
				itoa(mytime.hour1,str,10);
     b56:	c2 e7       	ldi	r28, 0x72	; 114
     b58:	d1 e0       	ldi	r29, 0x01	; 1
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     b5c:	4a e0       	ldi	r20, 0x0A	; 10
     b5e:	60 e4       	ldi	r22, 0x40	; 64
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
				lcd1602_send_string(str);
     b68:	80 e4       	ldi	r24, 0x40	; 64
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				itoa(mytime.hour2,str,10);
     b70:	8c 81       	ldd	r24, Y+4	; 0x04
     b72:	4a e0       	ldi	r20, 0x0A	; 10
     b74:	60 e4       	ldi	r22, 0x40	; 64
     b76:	71 e0       	ldi	r23, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
				lcd1602_send_string(str);
     b7e:	80 e4       	ldi	r24, 0x40	; 64
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				lcd1602_send_string(":");
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				itoa(mytime.minute1,str,10);
     b8e:	8d 81       	ldd	r24, Y+5	; 0x05
     b90:	4a e0       	ldi	r20, 0x0A	; 10
     b92:	60 e4       	ldi	r22, 0x40	; 64
     b94:	71 e0       	ldi	r23, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
				lcd1602_send_string(str);
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				itoa(mytime.minute2,str,10);
     ba4:	8e 81       	ldd	r24, Y+6	; 0x06
     ba6:	4a e0       	ldi	r20, 0x0A	; 10
     ba8:	60 e4       	ldi	r22, 0x40	; 64
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
				lcd1602_send_string(str);
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	91 e0       	ldi	r25, 0x01	; 1
     bb6:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				lcd1602_send_string("   ");
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
			
				itoa(mytime.day,str,10);
     bc2:	8a 81       	ldd	r24, Y+2	; 0x02
     bc4:	4a e0       	ldi	r20, 0x0A	; 10
     bc6:	60 e4       	ldi	r22, 0x40	; 64
     bc8:	71 e0       	ldi	r23, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
				lcd1602_send_string(str);
     bd0:	80 e4       	ldi	r24, 0x40	; 64
     bd2:	91 e0       	ldi	r25, 0x01	; 1
     bd4:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				lcd1602_send_string("/");
     bd8:	86 e0       	ldi	r24, 0x06	; 6
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				itoa(mytime.month,str,10);
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	4a e0       	ldi	r20, 0x0A	; 10
     be4:	60 e4       	ldi	r22, 0x40	; 64
     be6:	71 e0       	ldi	r23, 0x01	; 1
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
				lcd1602_send_string(str);
     bee:	80 e4       	ldi	r24, 0x40	; 64
     bf0:	91 e0       	ldi	r25, 0x01	; 1
     bf2:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				lcd1602_send_string("/");
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				itoa(mytime.year,str,10);
     bfe:	88 81       	ld	r24, Y
     c00:	4a e0       	ldi	r20, 0x0A	; 10
     c02:	60 e4       	ldi	r22, 0x40	; 64
     c04:	71 e0       	ldi	r23, 0x01	; 1
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
				lcd1602_send_string(str);
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
     c14:	15 c0       	rjmp	.+42     	; 0xc40 <main+0x176>
			
				
			}
			else
			{
				ds1302_reset_time();
     c16:	0e 94 c9 00 	call	0x192	; 0x192 <ds1302_reset_time>
				//zaman yok
				mytime.day=10;
     c1a:	e2 e7       	ldi	r30, 0x72	; 114
     c1c:	f1 e0       	ldi	r31, 0x01	; 1
     c1e:	8a e0       	ldi	r24, 0x0A	; 10
     c20:	82 83       	std	Z+2, r24	; 0x02
				mytime.month=1;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	81 83       	std	Z+1, r24	; 0x01
				mytime.year=21;
     c26:	95 e1       	ldi	r25, 0x15	; 21
     c28:	90 83       	st	Z, r25
				mytime.hour1=1;
     c2a:	83 83       	std	Z+3, r24	; 0x03
				mytime.hour2=3;
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	84 83       	std	Z+4, r24	; 0x04
				mytime.minute1=5;
     c30:	85 e0       	ldi	r24, 0x05	; 5
     c32:	85 83       	std	Z+5, r24	; 0x05
				mytime.minute2=9;
     c34:	89 e0       	ldi	r24, 0x09	; 9
     c36:	86 83       	std	Z+6, r24	; 0x06
				mytime.second=0;
     c38:	17 82       	std	Z+7, r1	; 0x07
				ds1302_set_time(&mytime);
     c3a:	cf 01       	movw	r24, r30
     c3c:	0e 94 16 02 	call	0x42c	; 0x42c <ds1302_set_time>
			}
                
				////sicaklik ve nem goster
			
					lcd1602_goto_xy(0,1);
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
					itoa(DHT11DisplayTemperature(),str,10);
     c48:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <DHT11DisplayTemperature>
     c4c:	4a e0       	ldi	r20, 0x0A	; 10
     c4e:	60 e4       	ldi	r22, 0x40	; 64
     c50:	71 e0       	ldi	r23, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
					lcd1602_send_string(str);
     c58:	80 e4       	ldi	r24, 0x40	; 64
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
					lcd1602_send_string(" C ");
     c60:	88 e0       	ldi	r24, 0x08	; 8
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
						
					itoa(DHT11DisplayHumidity(),str,10);
     c68:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <DHT11DisplayHumidity>
     c6c:	4a e0       	ldi	r20, 0x0A	; 10
     c6e:	60 e4       	ldi	r22, 0x40	; 64
     c70:	71 e0       	ldi	r23, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 e7 07 	call	0xfce	; 0xfce <__itoa_ncheck>
					lcd1602_send_string(str);
     c78:	80 e4       	ldi	r24, 0x40	; 64
     c7a:	91 e0       	ldi	r25, 0x01	; 1
     c7c:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
					lcd1602_send_string(" % ");
     c80:	8c e0       	ldi	r24, 0x0C	; 12
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>

				/////
			}
				
				///Keypad
				         key=KP_GetKey();
     c88:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <KP_GetKey>
     c8c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <key>
				


				      
						if(key=='A'&&alarm_durum!=2)
     c90:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     c94:	81 34       	cpi	r24, 0x41	; 65
     c96:	69 f4       	brne	.+26     	; 0xcb2 <main+0x1e8>
     c98:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <alarm_durum>
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	49 f0       	breq	.+18     	; 0xcb2 <main+0x1e8>
						{  //alarm kuruluyor
							lcd1602_clear();
     ca0:	0e 94 99 04 	call	0x932	; 0x932 <lcd1602_clear>
							alarm_durum=1;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <alarm_durum>
							alarm_kur=1;
     caa:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <alarm_kur>
							say_=1;
     cae:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <say_>
						}
						if(key=='B')
     cb2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     cb6:	82 34       	cpi	r24, 0x42	; 66
     cb8:	39 f4       	brne	.+14     	; 0xcc8 <main+0x1fe>
						{   //alarm var
							lcd1602_clear();
     cba:	0e 94 99 04 	call	0x932	; 0x932 <lcd1602_clear>
							alarm_durum=2;
     cbe:	82 e0       	ldi	r24, 0x02	; 2
     cc0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <alarm_durum>
							alarm_kur=0;
     cc4:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <alarm_kur>
						}
						if(key=='C')
     cc8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     ccc:	83 34       	cpi	r24, 0x43	; 67
     cce:	41 f4       	brne	.+16     	; 0xce0 <main+0x216>
						{   //alarm yok
							lcd1602_clear();
     cd0:	0e 94 99 04 	call	0x932	; 0x932 <lcd1602_clear>
							alarm_durum=0;
     cd4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <alarm_durum>
							alarm_kur=0;
     cd8:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <alarm_kur>
							alarm_cal=0;
     cdc:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <alarm_cal>
						}
						
				        if (alarm_durum==0)
     ce0:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <alarm_durum>
     ce4:	81 11       	cpse	r24, r1
     ce6:	08 c0       	rjmp	.+16     	; 0xcf8 <main+0x22e>
				        {  
					        lcd1602_goto_xy(10,1);
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	8a e0       	ldi	r24, 0x0A	; 10
     cec:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
					        lcd1602_send_string("YOK");
     cf0:	80 e1       	ldi	r24, 0x10	; 16
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				        }
				        if (alarm_durum==1)
     cf8:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <alarm_durum>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	41 f4       	brne	.+16     	; 0xd10 <main+0x246>
				        {  
					        lcd1602_goto_xy(0,1);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
					        lcd1602_send_string("KURULUYOR");
     d08:	84 e1       	ldi	r24, 0x14	; 20
     d0a:	91 e0       	ldi	r25, 0x01	; 1
     d0c:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
				        }
						if (alarm_durum==2)
     d10:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <alarm_durum>
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	09 f0       	breq	.+2      	; 0xd1a <main+0x250>
     d18:	9b c0       	rjmp	.+310    	; 0xe50 <main+0x386>
						{
							
 
		                    alarm_saat_1=(unsigned char)mytime.hour1;
     d1a:	e2 e7       	ldi	r30, 0x72	; 114
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	83 81       	ldd	r24, Z+3	; 0x03
     d20:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <alarm_saat_1>
							alarm_saat_2=(unsigned char)mytime.hour2;
     d24:	64 81       	ldd	r22, Z+4	; 0x04
     d26:	60 93 37 01 	sts	0x0137, r22	; 0x800137 <alarm_saat_2>
							alarm_dakika_1=(unsigned char)mytime.minute1;
     d2a:	45 81       	ldd	r20, Z+5	; 0x05
     d2c:	40 93 3d 01 	sts	0x013D, r20	; 0x80013d <alarm_dakika_1>
							alarm_dakika_2=(unsigned char)mytime.minute2;
     d30:	26 81       	ldd	r18, Z+6	; 0x06
     d32:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <alarm_dakika_2>
							
							alarm_saat_int_1=alarm_saat_1+48;
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	c0 96       	adiw	r24, 0x30	; 48
     d3a:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <alarm_saat_int_1+0x1>
     d3e:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <alarm_saat_int_1>
							alarm_saat_int_2=alarm_saat_2+48;
     d42:	70 e0       	ldi	r23, 0x00	; 0
     d44:	60 5d       	subi	r22, 0xD0	; 208
     d46:	7f 4f       	sbci	r23, 0xFF	; 255
     d48:	fb 01       	movw	r30, r22
     d4a:	70 93 36 01 	sts	0x0136, r23	; 0x800136 <alarm_saat_int_2+0x1>
     d4e:	60 93 35 01 	sts	0x0135, r22	; 0x800135 <alarm_saat_int_2>
							alarm_dakika_int_1=alarm_dakika_1+48;
     d52:	50 e0       	ldi	r21, 0x00	; 0
     d54:	40 5d       	subi	r20, 0xD0	; 208
     d56:	5f 4f       	sbci	r21, 0xFF	; 255
     d58:	ba 01       	movw	r22, r20
     d5a:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <alarm_dakika_int_1+0x1>
     d5e:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <alarm_dakika_int_1>
							alarm_dakika_int_2=alarm_dakika_2+48;
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	20 5d       	subi	r18, 0xD0	; 208
     d66:	3f 4f       	sbci	r19, 0xFF	; 255
     d68:	a9 01       	movw	r20, r18
     d6a:	30 93 34 01 	sts	0x0134, r19	; 0x800134 <alarm_dakika_int_2+0x1>
     d6e:	20 93 33 01 	sts	0x0133, r18	; 0x800133 <alarm_dakika_int_2>
							
							
							if (alarm_saat_int_1==saat1_&&alarm_saat_int_2==saat2_&&alarm_dakika_int_1==dakika1_&&alarm_dakika_int_2==dakika2_)
     d72:	20 91 2d 01 	lds	r18, 0x012D	; 0x80012d <saat1_>
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	82 17       	cp	r24, r18
     d7a:	93 07       	cpc	r25, r19
     d7c:	b1 f4       	brne	.+44     	; 0xdaa <main+0x2e0>
     d7e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <saat2_>
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	e8 17       	cp	r30, r24
     d86:	f9 07       	cpc	r31, r25
     d88:	81 f4       	brne	.+32     	; 0xdaa <main+0x2e0>
     d8a:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <dakika1_>
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	68 17       	cp	r22, r24
     d92:	79 07       	cpc	r23, r25
     d94:	51 f4       	brne	.+20     	; 0xdaa <main+0x2e0>
     d96:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dakika2_>
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	48 17       	cp	r20, r24
     d9e:	59 07       	cpc	r21, r25
     da0:	21 f4       	brne	.+8      	; 0xdaa <main+0x2e0>
							{
								alarm_cal=1;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <alarm_cal>
     da8:	2c c0       	rjmp	.+88     	; 0xe02 <main+0x338>
								

							}
							else
							{
								lcd1602_goto_xy(12,1);
     daa:	61 e0       	ldi	r22, 0x01	; 1
     dac:	8c e0       	ldi	r24, 0x0C	; 12
     dae:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
								lcd1602_send_string(":");
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
								lcd1602_goto_xy(10,1);
     dba:	61 e0       	ldi	r22, 0x01	; 1
     dbc:	8a e0       	ldi	r24, 0x0A	; 10
     dbe:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
								lcd1602_send_char(saat1_);
     dc2:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <saat1_>
     dc6:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
								lcd1602_goto_xy(11,1);
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	8b e0       	ldi	r24, 0x0B	; 11
     dce:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
								lcd1602_send_char(saat2_);
     dd2:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <saat2_>
     dd6:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
								lcd1602_goto_xy(13,1);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	8d e0       	ldi	r24, 0x0D	; 13
     dde:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
								lcd1602_send_char(dakika1_);
     de2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <dakika1_>
     de6:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
								lcd1602_goto_xy(14,1);
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	8e e0       	ldi	r24, 0x0E	; 14
     dee:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
								lcd1602_send_char(dakika2_);
     df2:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dakika2_>
     df6:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
								lcd1602_goto_xy(14,1);
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	8e e0       	ldi	r24, 0x0E	; 14
     dfe:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
							}
							
							if (alarm_cal==1)
     e02:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <alarm_cal>
     e06:	81 30       	cpi	r24, 0x01	; 1
     e08:	01 f5       	brne	.+64     	; 0xe4a <main+0x380>
							{
								lcd1602_goto_xy(10,1);
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
								lcd1602_send_string("UYAN");
     e12:	8e e1       	ldi	r24, 0x1E	; 30
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
								PORTB|=(1<<PORTB4); //buzzer çal
     e1a:	85 b1       	in	r24, 0x05	; 5
     e1c:	80 61       	ori	r24, 0x10	; 16
     e1e:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e20:	8f ef       	ldi	r24, 0xFF	; 255
     e22:	93 ed       	ldi	r25, 0xD3	; 211
     e24:	20 e3       	ldi	r18, 0x30	; 48
     e26:	81 50       	subi	r24, 0x01	; 1
     e28:	90 40       	sbci	r25, 0x00	; 0
     e2a:	20 40       	sbci	r18, 0x00	; 0
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <main+0x35c>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <main+0x366>
     e30:	00 00       	nop
								_delay_ms(1000);
								PORTB&=~(1<<PORTB4);
     e32:	85 b1       	in	r24, 0x05	; 5
     e34:	8f 7e       	andi	r24, 0xEF	; 239
     e36:	85 b9       	out	0x05, r24	; 5
     e38:	8f ef       	ldi	r24, 0xFF	; 255
     e3a:	93 ed       	ldi	r25, 0xD3	; 211
     e3c:	20 e3       	ldi	r18, 0x30	; 48
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	90 40       	sbci	r25, 0x00	; 0
     e42:	20 40       	sbci	r18, 0x00	; 0
     e44:	e1 f7       	brne	.-8      	; 0xe3e <main+0x374>
     e46:	00 c0       	rjmp	.+0      	; 0xe48 <main+0x37e>
     e48:	00 00       	nop
							}
							if (alarm_cal==0)
							{
							}
							{
								PORTB&=~(1<<PORTB4);
     e4a:	85 b1       	in	r24, 0x05	; 5
     e4c:	8f 7e       	andi	r24, 0xEF	; 239
     e4e:	85 b9       	out	0x05, r24	; 5
						
							
						}
						
						
						if(alarm_kur==1 && key!='A' && key!='B' && key!='C'&& key!='D'&& key!='E'&& key!='F')
     e50:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <alarm_kur>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	09 f0       	breq	.+2      	; 0xe5a <main+0x390>
     e58:	60 ce       	rjmp	.-832    	; 0xb1a <main+0x50>
     e5a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     e5e:	81 34       	cpi	r24, 0x41	; 65
     e60:	09 f4       	brne	.+2      	; 0xe64 <main+0x39a>
     e62:	5b ce       	rjmp	.-842    	; 0xb1a <main+0x50>
     e64:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     e68:	82 34       	cpi	r24, 0x42	; 66
     e6a:	09 f4       	brne	.+2      	; 0xe6e <main+0x3a4>
     e6c:	56 ce       	rjmp	.-852    	; 0xb1a <main+0x50>
     e6e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     e72:	83 34       	cpi	r24, 0x43	; 67
     e74:	09 f4       	brne	.+2      	; 0xe78 <main+0x3ae>
     e76:	51 ce       	rjmp	.-862    	; 0xb1a <main+0x50>
     e78:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     e7c:	84 34       	cpi	r24, 0x44	; 68
     e7e:	09 f4       	brne	.+2      	; 0xe82 <main+0x3b8>
     e80:	4c ce       	rjmp	.-872    	; 0xb1a <main+0x50>
     e82:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     e86:	85 34       	cpi	r24, 0x45	; 69
     e88:	09 f4       	brne	.+2      	; 0xe8c <main+0x3c2>
     e8a:	47 ce       	rjmp	.-882    	; 0xb1a <main+0x50>
     e8c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     e90:	86 34       	cpi	r24, 0x46	; 70
     e92:	09 f4       	brne	.+2      	; 0xe96 <main+0x3cc>
     e94:	42 ce       	rjmp	.-892    	; 0xb1a <main+0x50>
						{
							
							lcd1602_goto_xy(10,0);
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	8a e0       	ldi	r24, 0x0A	; 10
     e9a:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
							lcd1602_send_string(":");
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	91 e0       	ldi	r25, 0x01	; 1
     ea2:	0e 94 ad 04 	call	0x95a	; 0x95a <lcd1602_send_string>
							lcd1602_goto_xy(8,0);
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	88 e0       	ldi	r24, 0x08	; 8
     eaa:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
							lcd1602_send_char(saat1_);
     eae:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <saat1_>
     eb2:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
							lcd1602_goto_xy(9,0);
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	89 e0       	ldi	r24, 0x09	; 9
     eba:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
							lcd1602_send_char(saat2_);
     ebe:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <saat2_>
     ec2:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
							lcd1602_goto_xy(11,0);
     ec6:	60 e0       	ldi	r22, 0x00	; 0
     ec8:	8b e0       	ldi	r24, 0x0B	; 11
     eca:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
							lcd1602_send_char(dakika1_);
     ece:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <dakika1_>
     ed2:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
							lcd1602_goto_xy(12,0);
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	8c e0       	ldi	r24, 0x0C	; 12
     eda:	0e 94 a4 04 	call	0x948	; 0x948 <lcd1602_goto_xy>
							lcd1602_send_char(dakika2_);
     ede:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dakika2_>
     ee2:	0e 94 27 04 	call	0x84e	; 0x84e <lcd1602_send_char>
							
							
							if (say_==1 && key != Key_None)
     ee6:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <say_>
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	c1 f4       	brne	.+48     	; 0xf1e <main+0x454>
     eee:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     ef2:	88 23       	and	r24, r24
     ef4:	a1 f0       	breq	.+40     	; 0xf1e <main+0x454>
							{
								saat1_=(char)key;
     ef6:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     efa:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <saat1_>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	99 e6       	ldi	r25, 0x69	; 105
     f02:	28 e1       	ldi	r18, 0x18	; 24
     f04:	81 50       	subi	r24, 0x01	; 1
     f06:	90 40       	sbci	r25, 0x00	; 0
     f08:	20 40       	sbci	r18, 0x00	; 0
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <main+0x43a>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <main+0x444>
     f0e:	00 00       	nop
								_delay_ms(500);
								key=Key_None;
     f10:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <key>
								say_++;
     f14:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <say_>
     f18:	8f 5f       	subi	r24, 0xFF	; 255
     f1a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <say_>
								
							}
							if (say_==2&& key != Key_None && saat1_!=0)
     f1e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <say_>
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	e1 f4       	brne	.+56     	; 0xf5e <main+0x494>
     f26:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     f2a:	88 23       	and	r24, r24
     f2c:	c1 f0       	breq	.+48     	; 0xf5e <main+0x494>
     f2e:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <saat1_>
     f32:	88 23       	and	r24, r24
     f34:	a1 f0       	breq	.+40     	; 0xf5e <main+0x494>
							{
								saat2_=(char)key;
     f36:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     f3a:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <saat2_>
     f3e:	8f ef       	ldi	r24, 0xFF	; 255
     f40:	99 e6       	ldi	r25, 0x69	; 105
     f42:	28 e1       	ldi	r18, 0x18	; 24
     f44:	81 50       	subi	r24, 0x01	; 1
     f46:	90 40       	sbci	r25, 0x00	; 0
     f48:	20 40       	sbci	r18, 0x00	; 0
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <main+0x47a>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <main+0x484>
     f4e:	00 00       	nop
								_delay_ms(500);
								key=Key_None;
     f50:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <key>
								say_++;
     f54:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <say_>
     f58:	8f 5f       	subi	r24, 0xFF	; 255
     f5a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <say_>
	
							}
							if (say_==3&& key != Key_None &&saat2_!=0)
     f5e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <say_>
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	e1 f4       	brne	.+56     	; 0xf9e <main+0x4d4>
     f66:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     f6a:	88 23       	and	r24, r24
     f6c:	c1 f0       	breq	.+48     	; 0xf9e <main+0x4d4>
     f6e:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <saat2_>
     f72:	88 23       	and	r24, r24
     f74:	a1 f0       	breq	.+40     	; 0xf9e <main+0x4d4>
							{
								dakika1_=(char)key;
     f76:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     f7a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <dakika1_>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	99 e6       	ldi	r25, 0x69	; 105
     f82:	28 e1       	ldi	r18, 0x18	; 24
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	90 40       	sbci	r25, 0x00	; 0
     f88:	20 40       	sbci	r18, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <main+0x4ba>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <main+0x4c4>
     f8e:	00 00       	nop
								_delay_ms(500);
								key=Key_None;
     f90:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <key>
								say_++;
     f94:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <say_>
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <say_>

							}
							if (say_==4&& key != Key_None && dakika1_!=0)
     f9e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <say_>
     fa2:	84 30       	cpi	r24, 0x04	; 4
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <main+0x4de>
     fa6:	b9 cd       	rjmp	.-1166   	; 0xb1a <main+0x50>
     fa8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     fac:	88 23       	and	r24, r24
     fae:	09 f4       	brne	.+2      	; 0xfb2 <main+0x4e8>
     fb0:	b4 cd       	rjmp	.-1176   	; 0xb1a <main+0x50>
     fb2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <dakika1_>
     fb6:	88 23       	and	r24, r24
     fb8:	09 f4       	brne	.+2      	; 0xfbc <main+0x4f2>
     fba:	af cd       	rjmp	.-1186   	; 0xb1a <main+0x50>
							{
								dakika2_=(char)key;
     fbc:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <key>
     fc0:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dakika2_>
								key=Key_None;
     fc4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <key>
								say_=0;
     fc8:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <say_>
     fcc:	a6 cd       	rjmp	.-1204   	; 0xb1a <main+0x50>

00000fce <__itoa_ncheck>:
     fce:	bb 27       	eor	r27, r27
     fd0:	4a 30       	cpi	r20, 0x0A	; 10
     fd2:	31 f4       	brne	.+12     	; 0xfe0 <__itoa_ncheck+0x12>
     fd4:	99 23       	and	r25, r25
     fd6:	22 f4       	brpl	.+8      	; 0xfe0 <__itoa_ncheck+0x12>
     fd8:	bd e2       	ldi	r27, 0x2D	; 45
     fda:	90 95       	com	r25
     fdc:	81 95       	neg	r24
     fde:	9f 4f       	sbci	r25, 0xFF	; 255
     fe0:	0c 94 f3 07 	jmp	0xfe6	; 0xfe6 <__utoa_common>

00000fe4 <__utoa_ncheck>:
     fe4:	bb 27       	eor	r27, r27

00000fe6 <__utoa_common>:
     fe6:	fb 01       	movw	r30, r22
     fe8:	55 27       	eor	r21, r21
     fea:	aa 27       	eor	r26, r26
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	aa 1f       	adc	r26, r26
     ff2:	a4 17       	cp	r26, r20
     ff4:	10 f0       	brcs	.+4      	; 0xffa <__utoa_common+0x14>
     ff6:	a4 1b       	sub	r26, r20
     ff8:	83 95       	inc	r24
     ffa:	50 51       	subi	r21, 0x10	; 16
     ffc:	b9 f7       	brne	.-18     	; 0xfec <__utoa_common+0x6>
     ffe:	a0 5d       	subi	r26, 0xD0	; 208
    1000:	aa 33       	cpi	r26, 0x3A	; 58
    1002:	08 f0       	brcs	.+2      	; 0x1006 <__utoa_common+0x20>
    1004:	a9 5d       	subi	r26, 0xD9	; 217
    1006:	a1 93       	st	Z+, r26
    1008:	00 97       	sbiw	r24, 0x00	; 0
    100a:	79 f7       	brne	.-34     	; 0xfea <__utoa_common+0x4>
    100c:	b1 11       	cpse	r27, r1
    100e:	b1 93       	st	Z+, r27
    1010:	11 92       	st	Z+, r1
    1012:	cb 01       	movw	r24, r22
    1014:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <strrev>

00001018 <strrev>:
    1018:	dc 01       	movw	r26, r24
    101a:	fc 01       	movw	r30, r24
    101c:	67 2f       	mov	r22, r23
    101e:	71 91       	ld	r23, Z+
    1020:	77 23       	and	r23, r23
    1022:	e1 f7       	brne	.-8      	; 0x101c <strrev+0x4>
    1024:	32 97       	sbiw	r30, 0x02	; 2
    1026:	04 c0       	rjmp	.+8      	; 0x1030 <strrev+0x18>
    1028:	7c 91       	ld	r23, X
    102a:	6d 93       	st	X+, r22
    102c:	70 83       	st	Z, r23
    102e:	62 91       	ld	r22, -Z
    1030:	ae 17       	cp	r26, r30
    1032:	bf 07       	cpc	r27, r31
    1034:	c8 f3       	brcs	.-14     	; 0x1028 <strrev+0x10>
    1036:	08 95       	ret

00001038 <_exit>:
    1038:	f8 94       	cli

0000103a <__stop_program>:
    103a:	ff cf       	rjmp	.-2      	; 0x103a <__stop_program>
